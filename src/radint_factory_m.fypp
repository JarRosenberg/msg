! Module   : radint_factory_m
! Purpose  : factory procedures for radint_t type
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module radint_factory_m

  ! Uses
  
   use kinds_m
   use math_m
   
   use limb_m
   use radint_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   private

   public :: radint_from_table

   ! Procedures

contains

   function radint_from_table (I, mu, lambda, w_0, dw, n_w, li) result (ri)

      real(RD), intent(in)     :: I(:,:)
      real(RD), intent(in)     :: mu(:)
      real(RD), intent(in)     :: lambda(:)
      real(RD), intent(in)     :: w_0
      real(RD), intent(in)     :: dw
      integer, intent(in)      :: n_w
      type(limb_t), intent(in) :: li
      type(radint_t)           :: ri

      integer               :: n_mu
      integer               :: n_lambda
      real(RD), allocatable :: I_w(:,:)
      real(RD), allocatable :: x(:)
      integer               :: k
      real(RD)              :: w_a
      real(RD)              :: w_b
      integer               :: j
      real(RD), allocatable :: y(:)

      @:CHECK_BOUNDS(SIZE(I, 1), SIZE(mu))
      @:CHECK_BOUNDS(SIZE(I, 2), SIZE(lambda))

      ! Construct the radint_t from the tabulated I(mu,lambda) data

      ! Using piecewise linear integration, transform the intensity
      ! data onto the uniform-w (ln lambda) grid

      n_mu = SIZE(mu)
      n_lambda = SIZE(lambda)

      @:ASSERT(w_0 >= LOG(lambda(1)), out-of-range w)
      @:ASSERT(w_0 + n_w*dw <= LOG(lambda(n_lambda)), out-of-range w)

      allocate(I_w(n_mu,n_w))

      x = LOG(lambda)

      mu_loop : do j = 1, n_mu

         y = I(j,:)*lambda

         w_loop : do k = 1, n_w

            w_a = w_0 + (k-1)*dw
            w_b = w_0 + (k  )*dw

            I_w(j,k) = integrate_lin(x, y, w_a, w_b)/(w_b - w_a)

         end do w_loop

      end do mu_loop

      ! Create the radint_t

      ri = radint_t(I_w, mu, li)

      ! Finish

   end function radint_from_table

end module radint_factory_m
