! Module  : interp_m
! Purpose : interpolation support
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module interp_m

   ! Uses

   use kinds_m

   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Access specifiers

   private

   public :: eval_deriv_kernel
   public :: eval_cross_kernel
   public :: bicubic_interp

   ! Procedures

contains

   subroutine eval_deriv_kernel (x, kern, mask, stat)

      real(RD), intent(in)           :: x(:)
      real(RD), intent(out)          :: kern(:)
      logical, intent(in), optional  :: mask(:)
      integer, intent(out), optional :: stat

      logical  :: mask_(3)
      integer  :: stat_
      logical  :: fd_mask(2)
      real(RD) :: fd_kern(3,2)
      real(RD) :: u

      @:CHECK_BOUNDS(SIZE(x), 3)

      @:CHECK_BOUNDS(SIZE(kern), 3)

      if (PRESENT(mask)) then
         @:CHECK_BOUNDS(SIZE(mask), 3)
         mask_ = mask
      else
         mask_ = .TRUE.
      endif

      ! Evaluate the kernel for derivative calculation

      ! Set up finite difference (fd) kernels

      if (mask_(1) .AND. mask_(2)) then
         fd_mask(1) = .TRUE.
         fd_kern(:,1) = [-1._RD,1._RD,0._RD]/(x(2) - x(1))
      else
         fd_mask(1) = .FALSE.
      endif

      if (mask_(2) .AND. mask_(3)) then
         fd_mask(2) = .TRUE.
         fd_kern(:,2) = [0._RD,-1._RD,1._RD]/(x(3) - x(2))
      else
         fd_mask(2) = .FALSE.
      endif

      ! Blend them

      select case (COUNT(fd_mask))
      case (0)
         stat_ = STAT_UNAVAILABLE_DATA
      case (1)
         if (fd_mask(1)) then
            kern = fd_kern(:,1)
         else
            kern = fd_kern(:,2)
         endif
         stat_ = STAT_OK
      case (2)
         u = (x(2) - x(1))/(x(3) - x(1))
         kern = (1._RD-u)*fd_kern(:,1) + u*fd_kern(:,2)
         stat_ = STAT_OK
      end select

      ! If necessary, set up stat
      
      if (PRESENT(stat)) then
         stat = stat_
      else
         if (stat_ /= STAT_OK) then
            @:ABORT(unavailable data)
         endif
      endif
      
      ! Finish

      return

   end subroutine eval_deriv_kernel

   !****

   subroutine eval_cross_kernel(x, y, kern, mask, stat)

      real(RD), intent(in)           :: x(:)
      real(RD), intent(in)           :: y(:)
      real(RD), intent(out)          :: kern(:,:)
      logical, intent(in), optional  :: mask(:,:)
      integer, intent(out), optional :: stat

      logical  :: mask_(3,3)
      integer  :: stat_
      logical  :: fd_mask(2,2)
      real(RD) :: fd_kern(3,3,2,2)
      real(RD) :: u
      real(RD) :: v

      @:CHECK_BOUNDS(SIZE(x), 3)
      @:CHECK_BOUNDS(SIZE(y), 3)

      @:CHECK_BOUNDS(SIZE(kern, 1), 3)
      @:CHECK_BOUNDS(SIZE(kern, 2), 3)

      if (PRESENT(mask)) then
         @:CHECK_BOUNDS(SIZE(mask, 1), 3)
         @:CHECK_BOUNDS(SIZE(mask, 2), 3)
         mask_ = mask
      else
         mask_ = .TRUE.
      endif

      ! Evaluate the kernel for cross derivative calculation

      ! Set up finite difference (fd) kernels
      
      if (ALL(mask_(1:2,1:2))) then
         fd_mask(1,1) = .TRUE.
         fd_kern(:,1,1,1) = [1._RD,-1._RD,0._RD]/((x(2) - x(1))*(y(2) - y(1)))
         fd_kern(:,2,1,1) = [-1._RD,1._RD,0._RD]/((x(2) - x(1))*(y(2) - y(1)))
         fd_kern(:,3,1,1) = 0._RD
      else
         fd_mask(1,1) = .FALSE.
      endif
      
      if (ALL(mask_(2:3,1:2))) then
         fd_mask(2,1) = .TRUE.
         fd_kern(:,1,2,1) = [0._RD,1._RD,-1._RD]/((x(3) - x(2))*(y(2) - y(1)))
         fd_kern(:,2,2,1) = [0._RD,-1._RD,1._RD]/((x(3) - x(2))*(y(2) - y(1)))
         fd_kern(:,3,2,1) = 0._RD
      else
         fd_mask(2,1) = .FALSE.
      endif

      if (ALL(mask_(1:2,2:3))) then
         fd_mask(1,2) = .TRUE.
         fd_kern(:,1,1,2) = 0._RD
         fd_kern(:,2,1,2) = [1._RD,-1._RD,0._RD]/((x(2) - x(1))*(y(3) - y(2)))
         fd_kern(:,3,1,2) = [-1._RD,1._RD,0._RD]/((x(2) - x(1))*(y(3) - y(2)))
      else
         fd_mask(1,2) = .FALSE.
      endif

      if (ALL(mask_(2:3,2:3))) then
         fd_mask(2,2) = .TRUE.
         fd_kern(:,1,2,2) = 0._RD
         fd_kern(:,2,2,2) = [0._RD,1._RD,-1._RD]/((x(3) - x(2))*(y(3) - y(2)))
         fd_kern(:,3,2,2) = [0._RD,-1._RD,1._RD]/((x(3) - x(2))*(y(3) - y(2)))
      else
         fd_mask(2,2) = .FALSE.
      endif

      ! Blend them to create the first derivative

      select case (COUNT(fd_mask))
      case (0)
         stat_ = STAT_UNAVAILABLE_DATA
      case (1)
         if (fd_mask(1,1)) then
            kern = fd_kern(:,:,1,1)
         elseif (fd_mask(2,1)) then
            kern = fd_kern(:,:,2,1)
         elseif (fd_mask(1,2)) then
            kern = fd_kern(:,:,1,2)
         else
            kern = fd_kern(:,:,2,2)
         endif
         stat_ = STAT_OK
      case (2)
         if (fd_mask(1,1) .AND. fd_mask(2,1)) then
            u = (x(2) - x(1))/(x(3) - x(1))
            kern = (1._RD-u)*fd_kern(:,:,1,1) + u*fd_kern(:,:,2,1)
            stat_ = STAT_OK
         elseif (fd_mask(1,2) .AND. fd_mask(2,2)) then
            u = (x(2) - x(1))/(x(3) - x(1))
            kern = (1._RD-u)*fd_kern(:,:,1,2) + u*fd_kern(:,:,2,2) 
            stat_ = STAT_OK
         elseif (fd_mask(1,1) .AND. fd_mask(1,2)) then
            v = (y(2) - y(1))/(y(3) - y(1))
            kern = (1._RD-v)*fd_kern(:,:,1,1) + v*fd_kern(:,:,1,2)
            stat_ = STAT_OK
         elseif (fd_mask(2,1) .AND. fd_mask(2,2)) then
            v = (y(2) - y(1))/(y(3) - y(1))
            kern = (1._RD-v)*fd_kern(:,:,2,1) + v*fd_kern(:,:,2,2)
            stat_ = STAT_OK
         else
            stat_ = STAT_UNAVAILABLE_DATA
         end if
      case (3)
         if (.NOT. fd_mask(1,1)) then
            kern = fd_kern(:,:,2,2)
         elseif (.NOT. fd_mask(2,1)) then
            kern = fd_kern(:,:,1,2)
         elseif (.NOT. fd_mask(1,2)) then
            kern = fd_kern(:,:,2,1)
         else
            kern = fd_kern(:,:,1,1)
         endif
         stat_ = STAT_OK
      case (4)
         u = (x(2) - x(1))/(x(3) - x(1))
         v = (y(2) - y(1))/(y(3) - y(1))
         kern = &
              (1._RD-u)*(1._RD-v)*fd_kern(:,:,1,1) + &
              (      u)*(1._RD-v)*fd_kern(:,:,2,1) + &
              (1._RD-u)*(      v)*fd_kern(:,:,1,2) + &
              (      u)*(      v)*fd_kern(:,:,2,2)
         stat_ = STAT_OK
      end select

      if (PRESENT(stat)) then
         stat = stat_
      else
         if (stat_ /= STAT_OK) then
            @:ABORT(unavailable data)
         endif
      endif

      ! Finish

      return

   end subroutine eval_cross_kernel

   !****

   subroutine bicubic_interp(f, df_dx, df_dy, d2f_dxdy, dx, dy, u, v, f_int, d_dx, d_dy)

      real(RD), intent(in)          :: f(:,:)
      real(RD), intent(in)          :: df_dx(:,:)
      real(RD), intent(in)          :: df_dy(:,:)
      real(RD), intent(in)          :: d2f_dxdy(:,:)
      real(RD), intent(in)          :: dx
      real(RD), intent(in)          :: dy
      real(RD), intent(in)          :: u
      real(RD), intent(in)          :: v
      real(RD), intent(out)         :: f_int
      logical, intent(in), optional :: d_dx
      logical, intent(in), optional :: d_dy

      real(RD), parameter :: C(4,4) = RESHAPE([ &
           1, 0, 0, 0, &
           0, 0, 1, 0, &
           -3, 3, -2, -1, &
           2, -2, 1, 1], SHAPE(C))

      logical  :: d_dx_
      logical  :: d_dy_
      real(RD) :: B(4,4)
      real(RD) :: A(4,4)
      real(RD) :: P(4)
      real(RD) :: Q(4)

      @:CHECK_BOUNDS(SIZE(f, 1), 2)
      @:CHECK_BOUNDS(SIZE(f, 2), 2)
      
      @:CHECK_BOUNDS(SIZE(df_dx, 1), 2)
      @:CHECK_BOUNDS(SIZE(df_dx, 2), 2)
      
      @:CHECK_BOUNDS(SIZE(df_dy, 1), 2)
      @:CHECK_BOUNDS(SIZE(df_dy, 2), 2)
      
      @:CHECK_BOUNDS(SIZE(d2f_dxdy, 1), 2)
      @:CHECK_BOUNDS(SIZE(d2f_dxdy, 2), 2)
      
      if (PRESENT(d_dx)) then
         d_dx_ = d_dx
      else
         d_dx_ = .FALSE.
      endif
      
      if (PRESENT(d_dy)) then
         d_dy_ = d_dy
      else
         d_dy_ = .FALSE.
      endif
      
      ! Evaluate the interpolation coefficients

      B(1:2,1:2) = f
      B(3:4,1:2) = df_dx*dx
      B(1:2,3:4) = df_dy*dy
      B(3:4,3:4) = d2f_dxdy*dx*dy

      A = MATMUL(TRANSPOSE(C), MATMUL(B, C))

      ! Evaluate the interpolated values

      if (d_dx_) then
         P = [0._RD, 1._RD, 2._RD*u, 3._RD*u**2]/dx
      else
         P = [1._RD, u, u**2, u**3]
      endif

      if (d_dy_) then
         Q = [0._RD, 1._RD, 2._RD*v, 3._RD*v**2]/dy
      else
         Q = [1._RD, v, v**2, v**3]
      endif

      f_int = DOT_PRODUCT(P, MATMUL(A, Q))

      ! Finish

      return

   end subroutine bicubic_interp

end module interp_m
