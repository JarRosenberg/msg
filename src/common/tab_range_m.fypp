! Module  : tab_range_m
! Purpose : define tab_range_t type, representing a tabulated
!           range
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module tab_range_m

   ! Uses

   use forum_m, locate_ => locate

   use range_m, only: range_t
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(range_t) :: tab_range_t
      private
      real(RD), allocatable :: x(:)
      integer               :: n
   contains
      private
      procedure, public :: inquire
      procedure, public :: fetch
      procedure, public :: fetch_all
      procedure, public :: locate
   end type tab_range_t

   ! Interfaces

   interface tab_range_t
      module procedure tab_range_t_
      module procedure tab_range_t_subset_
   end interface tab_range_t

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: tab_range_t
   public :: read
   public :: write

contains

   function tab_range_t_(x) result (range)

      real(RD), intent(in) :: x(:)
      type(tab_range_t)    :: range

      integer :: n

      ! Construct range from the supplied data

      n = SIZE(x)

      @:ASSERT(n >= 1,'insufficient data')
      @:ASSERT_DEBUG(ALL(x(2:) > x(:n-1)),'non-monotonic data')

      range%x = x
      range%n = n

      ! Finish

      return

   end function tab_range_t_

   !****
    
   function tab_range_t_subset_(range_in, i_a, i_b) result (range)

      type(tab_range_t), intent(in) :: range_in
      integer, intent(in)           :: i_a
      integer, intent(in)           :: i_b
      type(tab_range_t)             :: range

      ! Construct range by subsetting range_in

      range = tab_range_t(range_in%x(i_a:i_b))

      ! Finish

      return

   end function tab_range_t_subset_


   !****

   subroutine inquire(self, n, min, max)

      class(tab_range_t), intent(in)  :: self
      integer, intent(out), optional  :: n
      real(RD), intent(out), optional :: min
      real(RD), intent(out), optional :: max

      ! Inquire metadata

      if (PRESENT(n)) n = self%n

      if (PRESENT(min)) min = self%x(1)
      if (PRESENT(max)) max = self%x(self%n)

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine fetch(self, i, x, stat)

      class(tab_range_t), intent(in) :: self
      integer, intent(in)            :: i
      real(RD), intent(out)          :: x
      integer, intent(out), optional :: stat

      ! Fetch the i'th value

      if (i < 1) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_RANGE_LO
            return
         else
            @:ABORT('out-of-bounds (lo) in range')
         endif
      endif

      if (i > self%n) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_RANGE_HI
            return
         else
            @:ABORT('out-of-bounds (hi) in range')
         endif
      endif

      x = self%x(i)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine fetch

   !****

   subroutine fetch_all(self, x)

      class(tab_range_t), intent(in) :: self
      real(RD), intent(out)          :: x(:)

      @:CHECK_BOUNDS(SIZE(x), self%n)

      ! Expand the range

      x = self%x

      ! Finish

      return

   end subroutine fetch_all

   !****

   subroutine locate(self, x, i, right)

      class(tab_range_t), intent(in) :: self
      real(RD), intent(in)           :: x
      integer, intent(inout)         :: i
      logical, intent(in), optional  :: right

      ! Locate where in range x falls

      call locate_(self%x, x, i, right=right)

      ! Finish

      return

   end subroutine locate

   !****

   subroutine read_(hdf5io, range, stat)

      type(hdf5io_t), intent(inout)  :: hdf5io
      type(tab_range_t), intent(out) :: range
      integer, intent(out), optional :: stat

      character(TYPE_LEN)   :: type
      real(RD), allocatable :: x(:)

      ! Read range

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'tab_range_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hdf5io%alloc_read_dset('x', x)
  
      range = tab_range_t(x)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read_

   !****

   subroutine write_(hdf5io, range, stat)

      type(hdf5io_t), intent(inout)  :: hdf5io
      class(tab_range_t), intent(in) :: range
      integer, intent(out), optional :: stat

      ! Write range

      call hdf5io%write_attr('TYPE', 'tab_range_t')
      
      call hdf5io%write_dset('x', range%x)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine write_

end module tab_range_m
