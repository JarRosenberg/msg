! Module  : log_range_m
! Purpose : define log_range_t type, representing a logarithmically
!           distributed range
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module log_range_m

   ! Uses

   use forum_m, locate_ => locate

   use lin_range_m, only: lin_range_t, read_lin => read, write_lin => write
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(lin_range_t) :: log_range_t
   contains
      private
      procedure, public :: inquire
      procedure, public :: fetch
      procedure, public :: fetch_all
      procedure, public :: locate
   end type log_range_t

   ! Interfaces

   interface log_range_t
      module procedure log_range_t_
      module procedure log_range_t_subset_
   end interface log_range_t

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: log_range_t
   public :: read
   public :: write

contains

   function log_range_t_(logx_0, dlogx, n) result(range)

     real(RD), intent(in) :: logx_0
     real(RD), intent(in) :: dlogx
     integer, intent(in)  :: n
     type(log_range_t)    :: range

     ! Construct range from the supplied data

     range%lin_range_t = lin_range_t(logx_0, dlogx, n)

     ! Finish

     return

   end function log_range_t_

   !****

   function log_range_t_subset_(range_in, i_a, i_b) result(range)

     type(log_range_t), intent(in) :: range_in
     integer, intent(in)           :: i_a
     integer, intent(in)           :: i_b
     type(log_range_t)             :: range

     ! Construct range by subsetting range_in

     range%lin_range_t = lin_range_t(range_in%lin_range_t, i_a, i_b)

     ! Finish

     return

   end function log_range_t_subset_

   !****

   subroutine inquire(self, n, min, max)

      class(log_range_t), intent(in)  :: self
      integer, intent(out), optional  :: n
      real(RD), intent(out), optional :: min
      real(RD), intent(out), optional :: max

      ! Inquire metadata

      call self%lin_range_t%inquire(n=n, min=min, max=max)

      if (PRESENT(min)) min = EXP(min)
      if (PRESENT(max)) max = EXP(max)

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine fetch(self, i, x, stat)

      class(log_range_t), intent(in) :: self
      integer, intent(in)            :: i
      real(RD), intent(out)          :: x
      integer, intent(out), optional :: stat

      ! Fetch the i'th value

      call self%lin_range_t%fetch(i, x, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      endif

      x = EXP(x)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine fetch

   !****

   subroutine fetch_all(self, x)

      class(log_range_t), intent(in) :: self
      real(RD), intent(out)          :: x(:)

      ! Fetch all values

      call self%lin_range_t%fetch_all(x)

      x = EXP(x)

      ! Finish

      return

   end subroutine fetch_all

   !****

   subroutine locate(self, x, i, right)

      class(log_range_t), intent(in) :: self
      real(RD), intent(in)           :: x
      integer, intent(inout)         :: i
      logical, intent(in), optional  :: right

      ! Locate where in range x falls

      call self%lin_range_t%locate(LOG(x), i, right=right)

      ! Finish

      return

   end subroutine locate

   !****

   subroutine read_(hdf5io, range, stat, skip_type)

      type(hdf5io_t), intent(inout)  :: hdf5io
      type(log_range_t), intent(out) :: range
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: skip_type

      logical             :: skip_type_
      character(TYPE_LEN) :: type

      if (PRESENT(skip_type)) then
         skip_type_ = skip_type
      else
         skip_type_ = .FALSE.
      endif

      ! Read range

      if (.NOT. skip_type_) then
         call hdf5io%read_attr('TYPE', type)
         if (type /= 'log_range_t') then
            if (PRESENT(stat)) then
               stat = STAT_INVALID_TYPE
            else
               @:ABORT('invalid type')
            end if
         end if
      end if

      call read_lin(hdf5io, range%lin_range_t, stat=stat, skip_type=.TRUE.)

      ! Finish

      return

   end subroutine read_

   !****

   subroutine write_(hdf5io, range, stat, skip_type)

      type(hdf5io_t), intent(inout)  :: hdf5io
      class(log_range_t), intent(in) :: range
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: skip_type

      logical :: skip_type_

      if (PRESENT(skip_type)) then
         skip_type_ = skip_type
      else
         skip_type_ = .FALSE.
      endif

      ! Write range

      if (.NOT. skip_type_) then
         call hdf5io%write_attr('TYPE', 'log_range_t')
      endif

      call write_lin(hdf5io, range%lin_range_t, stat=stat, skip_type=.TRUE.)

      ! Finish

      return

   end subroutine write_

end module log_range_m
