! Module  : log_range_m
! Purpose : define log_range_t type, representing a logarithmically
!           distributed range
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module log_range_m

   ! Uses

   use forum_m

   use range_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(range_t) :: log_range_t
      private
      real(RD) :: logx_0
      real(RD) :: dlogx
      integer  :: n
   contains
      private
      procedure, public :: inquire
      procedure, public :: expand
      procedure, public :: subset
      procedure, public :: read
      procedure, public :: write 
  end type log_range_t

   ! Interfaces

   interface log_range_t
      module procedure log_range_t_
   end interface log_range_t

   ! Access specifiers

   private

   public :: log_range_t

contains

   function log_range_t_(logx_0, dlogx, n) result(range)

      real(RD), intent(in) :: logx_0
      real(RD), intent(in) :: dlogx
      integer, intent(in)  :: n
      type(log_range_t)    :: range
      
      ! Construct range from the supplied data

      @:ASSERT(n >= 1,'insufficient data')

      range%logx_0 = logx_0
      range%dlogx = dlogx

      range%n = n

      ! Finish

      return

   end function log_range_t_

   !****

   subroutine inquire(self, n, min, max)

      class(log_range_t), intent(in)  :: self
      integer, intent(out), optional  :: n
      real(RD), intent(out), optional :: min
      real(RD), intent(out), optional :: max

      ! Inquire metadata

      if (PRESENT(n)) n = self%n

      if (PRESENT(min)) min = EXP(self%logx_0)
      if (PRESENT(max)) max = EXP(self%logx_0 + self%dlogx*(self%n-1))

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine expand(self, x)

      class(log_range_t), intent(in) :: self
      real(RD), intent(out)          :: x(:)

      integer :: i

      ! Expand the range into the array

      @:CHECK_BOUNDS(SIZE(x), self%n)

      ! Expand the range into the array

      do i = 1, self%n
         x(i) = EXP(self%logx_0 + self%dlogx*(i-1))
      end do

      ! Finish

      ! Finish

      return

   end subroutine expand

   !****

   subroutine subset(self, i_a, i_b, range)

      class(log_range_t), intent(in)           :: self
      integer, intent(in)                      :: i_a
      integer, intent(in)                      :: i_b
      class(range_t), allocatable, intent(out) :: range

      ! Subset the range

      @:ASSERT(i_a >= 1, 'invalid argument')
      @:ASSERT(i_b <= self%n, 'invalid argument')
      @:ASSERT(i_b >= i_a, 'invalid argument')

      range = log_range_t(self%logx_0+self%dlogx*(i_a-1), self%dlogx, i_b-i_a+1)

      ! Finish

      return

   end subroutine subset

   !****

   subroutine read(self, hdf5io, stat)

      class(log_range_t), intent(out) :: self
      type(hdf5io_t), intent(inout)   :: hdf5io
      integer, intent(out), optional  :: stat

      character(TYPE_LEN) :: type
      real(RD)            :: logx_0
      real(RD)            :: dlogx
      integer             :: n

      ! Read the range

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'log_range_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
         else
            @:ABORT('invalid type')
         end if
      end if

      call hdf5io%read_dset('logx_0', logx_0)
      call hdf5io%read_dset('dlogx', dlogx)
      call hdf5io%read_dset('n', n)

      select type(self)
      type is (log_range_t)
         self = log_range_t(logx_0, dlogx, n)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      return

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(log_range_t), intent(in) :: self
      type(hdf5io_t), intent(inout)  :: hdf5io
      integer, intent(out), optional :: stat

      ! Write range

      call hdf5io%write_attr('TYPE', 'log_range_t')

      call hdf5io%write_dset('logx_0', self%logx_0)
      call hdf5io%write_dset('dlogx', self%dlogx)
      call hdf5io%write_dset('n', self%n)
     
      ! Finish

      return

   end subroutine write

end module log_range_m
