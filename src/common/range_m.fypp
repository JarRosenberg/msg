! Module  : range_m
! Purpose : define range_t abstract type, represnting an ordered sequence
!           of values spanning a range
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module range_m

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, abstract :: range_t
   contains
      procedure(inquire_), deferred :: inquire
      procedure(expand_), deferred  :: expand
      procedure(subset_), deferred  :: subset
      procedure(read_), deferred    :: read
      procedure(write_), deferred   :: write
   end type range_t

   ! Interfaces

   abstract interface

      subroutine inquire_(self, n, min, max)
         use forum_m
         import range_t
         class(range_t), intent(in)      :: self
         integer, intent(out), optional  :: n
         real(RD), intent(out), optional :: min
         real(RD), intent(out), optional :: max
      end subroutine inquire_

      subroutine expand_(self, x)
         use forum_m
         import range_t
         class(range_t), intent(in)  :: self
         real(RD), intent(out)       :: x(:)
      end subroutine expand_

      subroutine subset_(self, i_a, i_b, range)
         import range_t
         class(range_t), intent(in)               :: self
         integer, intent(in)                      :: i_a
         integer, intent(in)                      :: i_b
         class(range_t), allocatable, intent(out) :: range
      end subroutine subset_

      subroutine read_(self, hdf5io, stat)
         use forum_m
         import range_t
         class(range_t), intent(out)    :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine read_

      subroutine write_(self, hdf5io, stat)
         use forum_m
         import range_t
         class(range_t), intent(in)     :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat
      end subroutine write_

   end interface

   interface range_t

      module function range_t_type_(type) result(range)
         character(*), intent(in)    :: type
         class(range_t), allocatable :: range
      end function range_t_type_

   end interface range_t
   
   ! Access specifiers

   private

   public :: range_t

end module range_m
