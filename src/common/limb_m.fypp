! Module  : limb_m
! Purpose : define limb_t type, representing limb-darkening laws
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module limb_m

   ! Uses

   use forum_m

   use fit_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: CONST_LAW = 1
   integer, parameter :: LINEAR_LAW = 2
   integer, parameter :: SQRT_LAW = 3
   integer, parameter :: QUAD_LAW = 4
   integer, parameter :: CLARET_LAW = 5

   integer, parameter :: STR_LEN = 16

   ! Derived-type definitions

   type limb_t
      private
      integer, public :: law = 0
   contains
      private
      procedure, public :: n_basis
      procedure, public :: eval_intensity_basis
      procedure, public :: eval_flux_basis
      procedure, public :: eval_D_moment_basis
      procedure         :: fit_intensity_0_
      procedure         :: fit_intensity_1_
      generic, public   :: fit_intensity => fit_intensity_0_, fit_intensity_1_
   end type limb_t

   ! Interfaces

   interface limb_t
      module procedure limb_t_
   end interface limb_t

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: limb_t
   public :: read
   public :: write

   ! Procedures

contains

   function limb_t_(str) result (li)

      character(*), intent(in) :: str
      type(limb_t)             :: li

      ! Construct the limb_t from the supplied data

      li%law = str_to_law_(str)

      ! Finish

      return

   end function limb_t_

   !****

   function law_to_str_(law) result(str)

      integer, intent(in) :: law
      character(STR_LEN)  :: str

      ! Convert the law index into a string

      select case (law)
      case (CONST_LAW)
         str = 'CONST'
      case (LINEAR_LAW)
         str = 'LINEAR'
      case (SQRT_LAW)
         str = 'SQRT'
      case (QUAD_LAW)
         str = 'QUAD'
      case (CLARET_LAW)
         str = 'CLARET'
      case default
         @:ABORT('invalid law')
      end select

      ! Finish

      return

   end function law_to_str_
      

   !****

   function str_to_law_(str) result(law)

      character(*), intent(in) :: str
      integer                  :: law

      ! Convert the string into a law index

      select case (str)
      case ('CONST')
         law = CONST_LAW
      case ('LINEAR')
         law = LINEAR_LAW
      case ('SQRT')
         law = SQRT_LAW
      case ('QUAD')
         law = QUAD_LAW
      case ('CLARET')
         law = CLARET_LAW
      case default
         @:ABORT('invalid string')
      end select

      ! Finish

      return

   end function str_to_law_

   !****

   function n_basis (self)

      class(limb_t), intent(in) :: self
      integer                   :: n_basis

      ! Return the number of basis functions

      select case (self%law)
      case (CONST_LAW)
         n_basis = 1
      case (LINEAR_LAW)
         n_basis = 2
      case (SQRT_LAW)
         n_basis = 3
      case (QUAD_LAW)
         n_basis = 3
      case (CLARET_LAW)
         n_basis = 5
      case default
         @:ABORT('invalid law')
      end select

      ! Finish

      return

   end function n_basis

   !****

   subroutine eval_intensity_basis(self, mu, b, stat)

      class(limb_t), intent(in)      :: self
      real(RD), intent(in)           :: mu
      real(RD)                       :: b(:)
      integer, intent(out), optional :: stat

      @:CHECK_BOUNDS(SIZE(b),self%n_basis())

      ! Evaluate the intensity basis functions

      if (mu < 0._RD) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_MU_LO
            return
         else
            @:ABORT('out-of-bounds (lo) mu')
         endif
      endif

      if (mu > 1._RD) then
         if (PRESENT(stat)) then
            stat = STAT_OUT_OF_BOUNDS_MU_HI
            return
         else
            @:ABORT('out-of-bounds (hi) mu')
         endif
      endif

      select case (self%law)
      case (CONST_LAW)
         b = [      &
              1._RD &
              ]
      case (LINEAR_LAW)
         b = [           &
              1._RD,     &
              mu - 1._RD &
              ]
      case (SQRT_LAW)
         b = [                  &
              1._RD,            &
              sqrt(mu) - 1._RD, &
              mu - 1._RD        &
              ]
      case (QUAD_LAW)
         b = [              &
              1._RD,        &
              mu - 1._RD,   &
              mu**2 - 1._RD &
              ]
      case (CLARET_LAW)
         b = [                     &
              1._RD,               &
              sqrt(mu) - 1._RD,    &
              mu - 1._RD,          &
              sqrt(mu)*mu - 1._RD, &
              mu**2 - 1._RD        &
              ]
      case default
         @:ABORT('invalid law')
      end select

      if (PRESENT(stat)) stat = STAT_OK

      ! Finish

      return

   end subroutine eval_intensity_basis

   !****

   subroutine eval_D_moment_basis(self, l, b, stat)

      class(limb_t), intent(in)      :: self
      integer, intent(in)            :: l
      real(RD)                       :: b(:)
      integer, intent(out), optional :: stat

      @:CHECK_BOUNDS(SIZE(b), self%n_basis())

      ! Evaluate the D-moment basis functions

      if (l < 0) then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_L
            return
         else
            @:ABORT('invalid argument')
         endif
      endif

      select case (self%law)
      case (CONST_LAW)
         b = [               &
              D_ls(l, 1._RD) &
              ]
      case (LINEAR_LAW)
         b = [                                &
              D_ls(l, 1._RD),                 &
              D_ls(l, 2._RD) - D_ls(l, 1._RD) &
              ]
      case (SQRT_LAW)
         b = [                                  &
              D_ls(l, 1._RD),                   &
              D_ls(l, 1.5_RD) - D_ls(l, 1._RD), &
              D_ls(l, 2._RD) - D_ls(l, 1._RD)   &
              ]
      case (QUAD_LAW)
         b = [                                 &
              D_ls(l, 1._RD),                  &
              D_ls(l, 2._RD) - D_ls(l, 1._RD), &
              D_ls(l, 3._RD) - D_ls(l, 1._RD)  &
              ]
      case (CLARET_LAW)
         b = [                                  &
              D_ls(l, 1._RD),                   &
              D_ls(l, 1.5_RD) - D_ls(l, 1._RD), &
              D_ls(l, 2._RD) - D_ls(l, 1._RD),  &
              D_ls(l, 2.5_RD) - D_ls(l, 1._RD), &
              D_ls(l, 3._RD) - D_ls(l, 1._RD)   &
              ]
      case default
         @:ABORT('invalid law')
      end select

      if (PRESENT(stat)) stat = STAT_OK

      ! Finish

      return

   end subroutine eval_D_moment_basis

   !****

   subroutine eval_flux_basis(self, b, stat)

      class(limb_t), intent(in)      :: self
      real(RD)                       :: b(:)
      integer, intent(out), optional :: stat

      @:CHECK_BOUNDS(SIZE(b), self%n_basis())

      ! Evaluate the flux basis functions

      select case (self%law)
      case (CONST_LAW)
         b = TWOPI*[      &
              1._RD/2._RD &
              ]
      case (LINEAR_LAW)
         b = TWOPI*[       &
              1._RD/2._RD, &
              -1._RD/6._RD &
              ]
      case (SQRT_LAW)
         b = TWOPI*[         &
              1._RD/2._RD,   &
              -1._RD/10._RD, &
              -1._RD/6._RD   &
              ]
      case (QUAD_LAW)
         b = TWOPI*[        &
              1._RD/2._RD,  &
              -1._RD/6._RD, &
              -1._RD/4._RD  &
              ]
      case (CLARET_LAW)
         b = TWOPI*[         &
              1._RD/2._RD,   &
              -1._RD/10._RD, &
              -1._RD/6._RD,  &
              -3._RD/14._RD, &
              -1._RD/4._RD   &
              ]
      case default
         @:ABORT('invalid law')
      end select

      if (PRESENT(stat)) stat = STAT_OK

      ! Finish

      return

   end subroutine eval_flux_basis

   !****

   function D_ls(l, s)

      integer, intent(in)  :: l
      real(RD), intent(in) :: s
      real(RD)             :: D_ls

      integer :: l_0
      integer :: m

      ! Evaluate the integral mu^s Pl(mu) from 0 to 1, using the
      ! expressions (42-44) from Townsend (2003)

      l_0 = MOD(l, 2)

      D_ls = 1._RD/(1._RD + s + l_0)

      do m = l_0, l-2, 2
         D_ls = (s - m)/(s + m + 3._RD)*D_ls
      end do

      ! Finish

      return

   end function D_ls

   !****

   subroutine fit_intensity_0_ (self, I, mu, c)

      class(limb_t), intent(in)          :: self
      real(RD), intent(in)               :: I(:)
      real(RD), intent(in)               :: mu(:)
      real(RD), allocatable, intent(out) :: c(:)

      real(RD), allocatable :: I_(:,:)
      real(RD), allocatable :: c_(:,:)

      ! Fit the limb-darkening law to the intensity data

      allocate(I_(SIZE(I), 1))

      I_(:,1) = I

      call self%fit_intensity(I_, mu, c_)

      c = c_(:,1)

      ! Finish

      return

   end subroutine fit_intensity_0_

   !****

   subroutine fit_intensity_1_ (self, I, mu, c)

      class(limb_t), intent(in)          :: self
      real(RD), intent(in)               :: I(:,:)
      real(RD), intent(in)               :: mu(:)
      real(RD), allocatable, intent(out) :: c(:,:)

      integer               :: n_b
      integer               :: n_mu
      integer               :: n_k
      integer               :: k
      real(RD)              :: y(SIZE(I, 1),SIZE(I, 2))
      real(RD), allocatable :: a(:,:)

      @:CHECK_BOUNDS(SIZE(I, 1), SIZE(mu))

      ! Fit the limb-darkening law to the intensity data. The fit is
      ! constrained to pass through I(mu=1)

      n_b = self%n_basis()

      n_mu = SIZE(I, 1)
      n_k = SIZE(I, 2)

      if (n_b > 1) then

         ! Set up the fit data

         y_loop : do k = 1, n_k
            y(:,k) = 1._RD - I(:,k)/I(n_mu,k)
         end do y_loop

         ! Fit the a-coefficients

         allocate(a(n_b-1,n_k))

         call gls_fit(mu, y, f_, a)

         ! Tranform to c-coefficients

         allocate(c(n_b,n_k))

         c_loop : do k = 1, n_k
            c(1,k) = I(n_mu,k)
            c(2:,k) = -I(n_mu,k)*a(:,k)
         end do c_loop

      else

         ! When n_b == 1, no fitting is (or can be) done; just copy
         ! over the normal intensity

         allocate(c(1,n_k))

         c(1,:) = I(n_mu,:)

      endif

      ! Finish

      return

   contains

      function f_ (mu, n)

         real(RD), intent(in) :: mu
         integer, intent(in)  :: n
         real(RD)             :: f_(n)

         real(RD) :: b(n+1)

         call self%eval_intensity_basis(mu, b)

         f_ = b(2:)

      end function f_

   end subroutine fit_intensity_1_

   !****
      
   subroutine read_(hi, li)

      type(hdf5io_t), intent(inout) :: hi
      type(limb_t), intent(out)     :: li

      character(TYPE_LEN) :: type
      character(STR_LEN)  :: str

      ! Read the limb_t

      call hi%read_attr('TYPE', type)
      @:ASSERT(type == 'limb_t', 'invalid type')

      call hi%read_attr('law', str)
  
      li = limb_t(str)

      ! Finish

      return

   end subroutine read_

   !****

   subroutine write_ (hi, li)

      type(hdf5io_t), intent(inout) :: hi
      type(limb_t), intent(in)      :: li

      ! Write the limb_t

      call hi%write_attr('TYPE', 'limb_t')
      
      call hi%write_attr('law', law_to_str_(li%law))

      ! Finish

      return

   end subroutine write_

end module limb_m
