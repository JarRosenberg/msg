! Module  : libcmsg
! Purpose : C interfaces for MSG modules
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module libcmsg_m

   ! Uses

   use libforum

   use libmsg

   use ISO_FORTRAN_ENV
   use ISO_C_BINDING

   ! No implicit typing

   implicit none

   ! Access specifiers

   private

   #:for prefix in ('specgrid', 'photgrid')
      public :: ${prefix}$_load
      public :: ${prefix}$_unload
      public :: ${prefix}$_inquire
      public :: ${prefix}$_interp_intensity
      public :: ${prefix}$_interp_D_moment
      public :: ${prefix}$_interp_flux
  #:endfor

   public :: specgrid_load_rebin

   ! Procedures

contains

   #:for prefix, type in (('specgrid', 'specgrid_t'), ('photgrid', 'photgrid_t'))

      function ${prefix}$_load(c_filename) result(ptr) bind(C)

         character(C_CHAR) :: c_filename(*)
         type(C_PTR)       :: ptr

         type(${type}$), pointer   :: gr
         character(:), allocatable :: filename
         type(hdf5io_t)            :: hi

         ! Allocate the grid

         allocate(gr)

         ! Load it from the file

         call c_f_string(c_filename, filename)

         hi = hdf5io_t(filename, OPEN_FILE_RO)
         call read(hi, gr)
         call hi%final()

         ! Set up the C pointer

         ptr = C_LOC(gr)

         ! Finish

         return

      end function ${prefix}$_load

      !****

      subroutine ${prefix}$_unload(ptr) bind(C)

         type(C_PTR), value :: ptr

         type(${type}$), pointer :: gr

         ! Set up the Fortran pointer

         call C_F_POINTER(ptr, gr)

         ! Deallocate the grid

         if (ASSOCIATED(gr)) deallocate(gr)

         ! Finish

         return

      end subroutine ${prefix}$_unload

   #:endfor

   !****

   function specgrid_load_rebin(c_filename, w_0, dw, n_w) result(ptr) bind(C)

      character(C_CHAR)     :: c_filename(*)
      real(C_DOUBLE), value :: w_0
      real(C_DOUBLE), value :: dw
      integer(C_INT), value :: n_w
      type(C_PTR)           :: ptr

      type(specgrid_t), pointer :: gr
      character(:), allocatable :: filename
      type(hdf5io_t)            :: hi
 
      ! Allocate the grid

      allocate(gr)

      ! Load it from the file

      call c_f_string(c_filename, filename)

      hi = hdf5io_t(filename, OPEN_FILE_RO)
      call read(hi, gr, w_0, dw, n_w)
      call hi%final()

      ! Set up the C pointer

      ptr = C_LOC(gr)

      ! Finish

      return

   end function specgrid_load_rebin

   !****

   subroutine specgrid_inquire(ptr, w_0, dw, n_w, shape_ptr, rank) bind(C)

      type(C_PTR), value :: ptr
      real(C_DOUBLE)     :: w_0
      real(C_DOUBLE)     :: dw
      integer(C_INT)     :: n_w
      type(C_PTR), value :: shape_ptr
      integer(C_INT)     :: rank

      type(specgrid_t), pointer :: sg
      integer                   :: rank_
      integer, pointer          :: shape(:)

      ! Set up the Fortran pointer

      call C_F_POINTER(ptr, sg)

      ! Inquire metadata

      if (C_ASSOCIATED(shape_ptr)) then

         call sg%inquire(rank=rank_)

         call C_F_POINTER(shape_ptr, shape, [rank_])
         
         call sg%inquire(shape=shape)

      endif

      call sg%inquire(w_0=w_0, dw=dw, n_w=n_w, rank=rank)

      ! Finish

      return

   end subroutine specgrid_inquire

   !****

   subroutine photgrid_inquire(ptr, shape_ptr, rank) bind(C)

      type(C_PTR), value :: ptr
      type(C_PTR), value :: shape_ptr
      integer(C_INT)     :: rank
      
      type(photgrid_t), pointer :: pg
      integer                   :: rank_
      integer, pointer          :: shape(:)

      ! Set up the Fortran pointer

      call C_F_POINTER(ptr, pg)

      ! Inquire metadata

      if (C_ASSOCIATED(shape_ptr)) then

         call pg%inquire(rank=rank_)

         call C_F_POINTER(shape_ptr, shape, [rank_])
         
         call pg%inquire(shape=shape)

      endif

      call pg%inquire(rank=rank)

      ! Finish

      return

   end subroutine photgrid_inquire

   !****

   subroutine specgrid_get_label(ptr, i, label) bind(C)

      type(C_PTR), value    :: ptr
      integer(C_INT), value :: i
      character(C_CHAR)     :: label(*)

      type(specgrid_t), pointer         :: sg
      integer                           :: rank
      character(LABEL_LEN), allocatable :: labels(:)
      integer                           :: j

      ! Set up the Fortran pointer

      call C_F_POINTER(ptr, sg)

      ! Get the i'th label

      call sg%inquire(rank=rank)

      allocate(labels(rank))

      call sg%inquire(labels=labels)

      if (i >= 1 .AND. i <= SIZE(labels)) then
         call f_c_string(labels(i), label)
      else
         label(1:1) = C_NULL_CHAR
      endif

      ! Finish

      return

   end subroutine specgrid_get_label

   !****

   subroutine photgrid_get_label(ptr, i, label) bind(C)

      type(C_PTR), value    :: ptr
      integer(C_INT), value :: i
      character(C_CHAR)     :: label(*)

      type(photgrid_t), pointer         :: pg
      integer                           :: rank
      character(LABEL_LEN), allocatable :: labels(:)
      integer                           :: j

      ! Set up the Fortran pointer

      call C_F_POINTER(ptr, pg)

      ! Get the i'th label

      call pg%inquire(rank=rank)

      allocate(labels(rank))

      call pg%inquire(labels=labels)

      if (i >= 1 .AND. i <= SIZE(labels)) then
         call f_c_string(labels(i), label)
      else
         label(1:1) = C_NULL_CHAR
      endif

      ! Finish

      return

   end subroutine photgrid_get_label

   !****

   #:for name, var, arg_var, arg_type in (('intensity', 'I', 'mu', 'real(C_DOUBLE)'), &
                                          ('D_moment', 'D', 'l', 'integer(C_INT)'))

      subroutine specgrid_interp_${name}$(ptr, vx, ${arg_var}$, w_0, n_w, ${var}$, stat, vderiv) bind(C)

         type(C_PTR), value    :: ptr
         real(C_DOUBLE)        :: vx(*)
         ${arg_type}$, value   :: ${arg_var}$
         real(C_DOUBLE), value :: w_0
         integer(C_INT), value :: n_w
         real(C_DOUBLE)        :: ${var}$(n_w)
         integer(C_INT)        :: stat
         logical(C_BOOL)       :: vderiv(*)

         type(specgrid_t), pointer :: sg
         integer                   :: rank

         ! Set up the Fortran pointer

         call C_F_POINTER(ptr, sg)

         ! Interpolate the ${name}$

         call sg%inquire(rank=rank)

         call sg%interp_${name}$(vx(1:rank), ${arg_var}$, w_0, ${var}$, stat, LOGICAL(vderiv(1:rank)))

         ! Finish

         return

      end subroutine specgrid_interp_${name}$

      !****

      subroutine photgrid_interp_${name}$(ptr, vx, ${arg_var}$, ${var}$, stat, vderiv) bind(C)

         type(C_PTR), value  :: ptr
         real(C_DOUBLE)      :: vx(*)
         ${arg_type}$, value :: ${arg_var}$
         real(C_DOUBLE)      :: ${var}$
         integer(C_INT)      :: stat
         logical(C_BOOL)     :: vderiv(*)

         type(photgrid_t), pointer :: pg
         integer                   :: rank

         ! Set up the Fortran pointer

         call C_F_POINTER(ptr, pg)

         ! Interpolate the ${name}$

         call pg%inquire(rank=rank)

         call pg%interp_${name}$(vx(1:rank), ${arg_var}$, ${var}$, stat, LOGICAL(vderiv(1:rank)))

         ! Finish

         return

      end subroutine photgrid_interp_${name}$

   #:endfor

   !****
      
   #:for name, var in (('flux', 'F'),)

      subroutine specgrid_interp_${name}$(ptr, vx, w_0, n_w, ${var}$, stat, vderiv) bind(C)

         type(C_PTR), value    :: ptr
         real(C_DOUBLE)        :: vx(*)
         real(C_DOUBLE), value :: w_0
         integer(C_INT), value :: n_w
         real(C_DOUBLE)        :: ${var}$(n_w)
         integer(C_INT)        :: stat
         logical(C_BOOL)       :: vderiv(*)

         type(specgrid_t), pointer :: sg
         integer                   :: rank

         ! Set up the Fortran pointer

         call C_F_POINTER(ptr, sg)

         ! Interpolate the ${name}$

         call sg%inquire(rank=rank)

         call sg%interp_${name}$(vx(1:rank), w_0, ${var}$, stat, LOGICAL(vderiv(1:rank)))

         ! Finish

         return

      end subroutine specgrid_interp_${name}$

      !****

      subroutine photgrid_interp_${name}$(ptr, vx, ${var}$, stat, vderiv) bind(C)

         type(C_PTR), value :: ptr
         real(C_DOUBLE)     :: vx(*)
         real(C_DOUBLE)     :: ${var}$
         integer(C_INT)     :: stat
         logical(C_BOOL)    :: vderiv(*)

         type(photgrid_t), pointer :: pg
         integer                   :: rank

         ! Set up the Fortran pointer

         call C_F_POINTER(ptr, pg)

         ! Interpolate the ${name}$

         call pg%inquire(rank=rank)

         call pg%interp_${name}$(vx(1:rank), ${var}$, stat, LOGICAL(vderiv(1:rank)))

         ! Finish

         return

      end subroutine photgrid_interp_${name}$

   #:endfor

end module libcmsg_m
