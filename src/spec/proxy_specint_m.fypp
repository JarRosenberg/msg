! Module  : proxy_specint_m
! Purpose : Define proxy_specint_t type, for representing spectral
!           intensity via a pointer proxy to another specint_t
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module proxy_specint_m

   ! Uses

   use forum_m

   use passband_m
   use photint_m
   use range_m
   use specint_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(specint_t) :: proxy_specint_t
      private
      class(specint_t), pointer :: specint
   contains
      private
      procedure, public :: get_lam_min
      procedure, public :: get_lam_max
      procedure, public :: get_precise
      procedure, public :: get_usage
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure, public :: subset
      procedure, public :: rebin
      procedure, public :: filter
      procedure, public :: read
      procedure, public :: write
   end type proxy_specint_t

   ! Interfaces

   interface proxy_specint_t
      module procedure proxy_specint_t_
   end interface proxy_specint_t

   ! Access specifiers

   private

   public :: proxy_specint_t

   ! Procedures

contains

   function proxy_specint_t_(specint_in) result(specint)

      class(specint_t), pointer, intent(in) :: specint_in
      type(proxy_specint_t)                 :: specint

      ! Construct specint

      specint%specint => specint_in

      ! Finish

      return

   end function proxy_specint_t_

   !****

   #:for name, type in (('lam_min', 'real(RD)'), &
                        ('lam_max', 'real(RD)'), &
                        ('precise', 'logical'), &
                        ('usage', 'integer(ID)'))     

      subroutine get_${name}$(self, ${name}$)

         class(proxy_specint_t), intent(in) :: self
         ${type}$, intent(out)              :: ${name}$

         ! Pass

         call self%specint%get_${name}$(${name}$)

         ! Finish

         return

      end subroutine get_${name}$

   #:endfor

   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, ${arg_var}$, lam, res, stat)

         class(proxy_specint_t), intent(in) :: self
         ${arg_type}$, intent(in)           :: ${arg_var}$
         real(RD), intent(in)               :: lam(:)
         real(RD), intent(out)              :: res(:)
         integer, intent(out), optional     :: stat

         ! Pass

         call self%specint%interp_${name}$(${arg_var}$, lam, res, stat)

         ! Finish

         return

      end subroutine interp_${name}$

   #:endfor
      
   !****

   #:for name, var in (('flux', 'F'),)

      subroutine interp_${name}$(self, lam, res, stat)

         class(proxy_specint_t), intent(in) :: self
         real(RD), intent(in)              :: lam(:)
         real(RD), intent(out)             :: res(:)
         integer, intent(out), optional    :: stat

         ! Pass

         call self%specint%interp_${name}$(lam, res, stat)

         ! Finish

         return

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine subset(self, lam_min, lam_max, specint, stat)

      class(proxy_specint_t), intent(in)         :: self
      real(RD), intent(in)                       :: lam_min
      real(RD), intent(in)                       :: lam_max
      class(specint_t), allocatable, intent(out) :: specint
      integer, intent(out), optional             :: stat

      ! Pass

      call self%specint%subset(lam_min, lam_max, specint, stat)

      ! Finish

      return

   end subroutine subset

   !****

   subroutine rebin(self, range, specint, stat)

      class(proxy_specint_t), intent(in)         :: self
      class(range_t), intent(in)                 :: range
      class(specint_t), allocatable, intent(out) :: specint
      integer, intent(out), optional             :: stat

      ! Pass

      call self%specint%rebin(range, specint, stat)

      ! Finish

      return

   end subroutine rebin

   !****

   subroutine filter(self, passband, photint, stat)

      class(proxy_specint_t), intent(in)         :: self
      type(passband_t), intent(in)               :: passband
      class(photint_t), allocatable, intent(out) :: photint
      integer, intent(out), optional             :: stat

      ! Pass

      call self%specint%filter(passband, photint, stat)

      ! Finish

      return

   end subroutine filter

   !****

   subroutine read(self, hdf5io, stat)

      class(proxy_specint_t), intent(out) :: self
      type(hdf5io_t), intent(inout)       :: hdf5io
      integer, intent(out), optional      :: stat

      ! Abort, since this should never get called

      @:ABORT('undefined operation')

      ! Finish

      return

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(proxy_specint_t), intent(in) :: self
      type(hdf5io_t), intent(inout)      :: hdf5io
      integer, intent(out), optional     :: stat

      ! Pass

      call self%specint%write(hdf5io, stat)

      ! Finish

      return

   end subroutine write

end module proxy_specint_m
