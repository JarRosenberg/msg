! Module  : hdf5_spectable_m
! Purpose : define hdf5_spectable_t type, for representing a cached
!           table of spectral intensities
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module hdf5_spectable_m

   ! Uses

   use forum_m

   use passband_m
   use photint_m
   use specint_m
   use spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(spectable_t) :: hdf5_spectable_t
      private
      type(specint_t), allocatable :: specints(:)
      character(:), allocatable    :: file_names(:)
      character(:), allocatable    :: group_names(:)
      integer, allocatable         :: ltimes(:)
      real(RD)                     :: lam_min
      real(RD)                     :: lam_max
      integer                      :: n
      real(RD)                     :: cache_lam_min
      real(RD)                     :: cache_lam_max
      integer                      :: cache_limit
      integer                      :: cache_count
   contains
      private
      procedure, public :: inquire
      procedure, public :: config
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure, public :: filter
      procedure         :: apply_
      procedure         :: cache_
      procedure         :: load_
      procedure, public :: read
      procedure, public :: write
   end type hdf5_spectable_t

   ! Interfaces

   interface hdf5_spectable_t
      module procedure hdf5_spectable_t_
   end interface hdf5_spectable_t

   ! Access specifiers

   private

   public :: hdf5_spectable_t

contains

   function hdf5_spectable_t_(file_names, group_names, lam_min, lam_max) result(spectable)

      character(*), intent(in) :: file_names(:)
      character(*), intent(in) :: group_names(:)
      real(RD), intent(in)     :: lam_min 
      real(RD), intent(in)     :: lam_max
      type(hdf5_spectable_t)   :: spectable

      integer :: n

      @:CHECK_BOUNDS(SIZE(group_names), SIZE(file_names))

      ! Construct the spectable_t from the lists of file/group names

      n = SIZE(file_names)

      allocate(spectable%specints(n))

      spectable%file_names = file_names
      spectable%group_names = group_names

      allocate(spectable%ltimes(n))
      spectable%ltimes = 0

      spectable%lam_min = lam_min
      spectable%lam_max = lam_max

      spectable%n = n

      spectable%cache_lam_min = lam_min
      spectable%cache_lam_max = lam_max

      spectable%cache_limit = n
      spectable%cache_count = 0

      ! Finish

      return

   end function hdf5_spectable_t_

   !****

   subroutine inquire(self, n, lam_min, lam_max)

      class(hdf5_spectable_t), intent(in) :: self
      integer, intent(out), optional      :: n
      real(RD), intent(out), optional     :: lam_min
      real(RD), intent(out), optional     :: lam_max

      ! Inquire metadata and configuration parameters

      if (PRESENT(n)) n = self%n

      if (PRESENT(lam_min)) lam_min = self%lam_min
      if (PRESENT(lam_max)) lam_max = self%lam_max

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine config(self, cache_limit, cache_lam_min, cache_lam_max, stat)
      
      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in), optional          :: cache_limit
      real(RD), intent(in), optional         :: cache_lam_min
      real(RD), intent(in), optional         :: cache_lam_max
      integer, intent(out), optional         :: stat

      logical :: flush_cache
      integer :: i
      
      ! Set configuration parameters

      flush_cache = .FALSE.

      call config_I_(self%cache_limit, cache_limit, param_min=0, param_max=self%n, stat=stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      call config_R_(self%cache_lam_min, cache_lam_min, param_min=self%lam_min, stat=stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      call config_R_(self%cache_lam_max, cache_lam_max, param_max=self%lam_max, stat=stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! If necessary, flush the cache

      if (flush_cache .AND. self%cache_count > 0) then

         flush_loop : do i = 1, self%n
            call flush_(self%specints(i))
         end do flush_loop
         
         self%ltimes = 0
      
         self%cache_count = 0

      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   contains

      #:for type, suffix in (('integer', 'I'), ('real(RD)', 'R'))

         subroutine config_${suffix}$_(param, param_in, param_min, param_max, stat)

            ${type}$, intent(inout)        :: param
            ${type}$, intent(in), optional :: param_in
            ${type}$, intent(in), optional :: param_min
            ${type}$, intent(in), optional :: param_max
            integer, intent(out), optional :: stat

            ! Set the parameter

            if (PRESENT(param_in)) then

               if (PRESENT(param_min)) then
                  if (param_in < param_min) then
                     if (PRESENT(stat)) then
                        stat = STAT_INVALID_ARGUMENT
                        return
                     else
                        @:ABORT('invalid argument')
                     end if
                  end if
               end if

               if (PRESENT(param_max)) then
                  if (param_in > param_max) then
                     if (PRESENT(stat)) then
                        stat = STAT_INVALID_ARGUMENT
                        return
                     else
                        @:ABORT('invalid argument')
                     end if
                  end if
               end if

               param = param_in

               flush_cache = .TRUE.

            end if

            ! Finish

            if (PRESENT(stat)) stat = STAT_OK

            return

         end subroutine config_${suffix}$_

      #:endfor

   end subroutine config

   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, i, ${arg_var}$, lam, res, stat)

         class(hdf5_spectable_t), intent(inout) :: self
         integer, intent(in)                    :: i
         ${arg_type}$, intent(in)               :: ${arg_var}$
         real(RD), intent(in)                   :: lam(:)
         real(RD), intent(out)                  :: res(:)
         integer, intent(out), optional         :: stat

         ! Interpolate ${name}$ using the i'th specint

         call self%apply_(i, interp_proc_, stat)

         ! Finish

         return

      contains

         subroutine interp_proc_(specint, stat)

            type(specint_t), intent(in)    :: specint
            integer, intent(out), optional :: stat

            call specint%interp_${name}$(${arg_var}$, lam, res, stat)

            return

         end subroutine interp_proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name in ('flux', )

      subroutine interp_${name}$(self, i, lam, res, stat)

         class(hdf5_spectable_t), intent(inout) :: self
         integer, intent(in)                    :: i
         real(RD), intent(in)                   :: lam(:)
         real(RD), intent(out)                  :: res(:)
         integer, intent(out), optional         :: stat

         ! Interpolate ${name}$ using the i'th specint

         call self%apply_(i, interp_proc_, stat)

         ! Finish

         return

      contains

         subroutine interp_proc_(specint, stat)

            type(specint_t), intent(in)    :: specint
            integer, intent(out), optional :: stat

            call specint%interp_${name}$(lam, res, stat)

            return

         end subroutine interp_proc_

      end subroutine interp_${name}$

   #:endfor

  !****

   subroutine filter(self, i, passband, photint, stat)

      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      type(passband_t), intent(in)           :: passband
      type(photint_t), intent(out)           :: photint
      integer, intent(out), optional         :: stat

      ! Filter the i'th specint through the passband to yield photint

      call self%apply_(i, filter_proc_, stat)

      ! Finish

      return

   contains

      subroutine filter_proc_(specint, stat)

         type(specint_t), intent(in)    :: specint
         integer, intent(out), optional :: stat

         call specint%filter(passband, photint, stat)

         return

      end subroutine filter_proc_

   end subroutine filter
      
  !****

   subroutine apply_(self, i, proc, stat)

      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      interface
         subroutine proc(specint, stat)
            import specint_t
            type(specint_t), intent(in)    :: specint
            integer, intent(out), optional :: stat
         end subroutine proc
      end interface
      integer, intent(out), optional        :: stat

      type(specint_t) :: specint

      ! Apply proc to the i'th element of the spectable

      if (self%cache_limit > 0) then

         call self%cache_(i, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         call proc(self%specints(i), stat)

      else

         call self%load_(i, specint, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if
         
         call proc(specint, stat)

      end if

      ! Finish

      return

   end subroutine apply_
      
   !****

   subroutine cache_(self, i, stat)

      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      integer, intent(out), optional         :: stat

      integer :: j

      ! Update the cache to ensure the i'th entry is present

      if (self%ltimes(i) > 0) then

         ! Entry is already in the cache; update the lifetime counters

         where (self%ltimes > self%ltimes(i))
            self%ltimes = self%ltimes - 1
         end where

      else

         ! Entry is not in the cache; load it

         if (self%cache_count == self%cache_limit) then

            ! Evict the oldest entry to make room

            j = MINLOC(self%ltimes, DIM=1, mask=self%ltimes > 0)

            call flush_(self%specints(j))

            where (self%ltimes > 0)
               self%ltimes = self%ltimes - 1
            end where

         else

            self%cache_count = self%cache_count + 1

         end if

         call self%load_(i, self%specints(i), stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end if

      self%ltimes(i) = self%cache_count

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine cache_

   !****

   subroutine flush_(specint)

      type(specint_t), intent(out) :: specint

      ! Flush the specint (by setting to uninitialized)

   end subroutine flush_

   !****

   subroutine load_(self, i, specint, stat)
      
      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      type(specint_t), intent(out)           :: specint
      integer, intent(out), optional         :: stat

      type(hdf5io_t)  :: hdf5io
      type(hdf5io_t)  :: hdf5io_specint
      type(specint_t) :: specint_

      ! Load the i'th specint_t from file

      hdf5io = hdf5io_t(self%file_names(i), OPEN_FILE_RO)
      hdf5io_specint = hdf5io_t(hdf5io, self%group_names(i))

      call specint%read(hdf5io_specint, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      endif

      call hdf5io_specint%final()
      call hdf5io%final()

      ! If necessary, subset

      if (self%cache_lam_min /= self%lam_min .OR. self%cache_lam_max /= self%lam_max) then
         call specint%subset(self%cache_lam_min, self%cache_lam_max, specint_)
         specint = specint_
      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine load_

   !****
   
   subroutine read(self, hdf5io, stat)

      class(hdf5_spectable_t), intent(out) :: self
      type(hdf5io_t), intent(inout)        :: hdf5io
      integer, intent(out), optional       :: stat

      character(TYPE_LEN)       :: type
      integer                   :: n
      real(RD)                  :: lam_min
      real(RD)                  :: lam_max
      character(:), allocatable :: file_name
      character(:), allocatable :: group_name
      character(:), allocatable :: file_names(:)
      character(:), allocatable :: group_names(:)
      integer                   :: i

      ! Read the spectable_t

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'spectable_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hdf5io%read_attr('n', n)

      call hdf5io%read_attr('lam_min', lam_min)
      call hdf5io%read_attr('lam_max', lam_max)

      call hdf5io%inquire(file_name=file_name, group_name=group_name)

      allocate(character(LEN(file_name))::file_names(n))
      allocate(character(LEN(group_name)+256)::group_names(n))

      name_loop : do i = 1, n

         file_names(i) = file_name
         group_names(i) = group_name//'/'//self%elem_group_name(i)

      end do name_loop

      select type(self)
      type is(hdf5_spectable_t)
         self = hdf5_spectable_t(file_names, group_names, lam_min, lam_max)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(hdf5_spectable_t), intent(inout) :: self
      type(hdf5io_t), intent(inout)          :: hdf5io
      integer, intent(out), optional         :: stat

      integer         :: n
      real(RD)        :: lam_min
      real(RD)        :: lam_max
      integer         :: i
      type(hdf5io_t)  :: hdf5io_specint

      ! Write the spectable_t

      call hdf5io%write_attr('TYPE', 'spectable_t')

      call self%inquire(n=n, lam_min=lam_min, lam_max=lam_max)

      call hdf5io%write_attr('n', n)
      
      call hdf5io%write_attr('lam_min', lam_min)
      call hdf5io%write_attr('lam_max', lam_max)

      write_loop : do i = 1, n

         hdf5io_specint = hdf5io_t(hdf5io, self%elem_group_name(i))
         call self%apply_(i, write_proc_, stat)
         call hdf5io_specint%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end do write_loop

      ! Finish

      return

   contains

      subroutine write_proc_(specint, stat)

         type(specint_t), intent(in)    :: specint
         integer, intent(out), optional :: stat

         call specint%write(hdf5io_specint, stat)

         return

      end subroutine write_proc_

   end subroutine write

end module hdf5_spectable_m
