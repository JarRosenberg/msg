! Module  : hdf5_spectable_m
! Purpose : define hdf5_spectable_t type, for representing a cached
!           table of spectral intensities
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module hdf5_spectable_m

   ! Uses

   use forum_m

   use specint_m
   use spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(spectable_t) :: hdf5_spectable_t
      private
      type(specint_t), allocatable :: si(:)
      character(:), allocatable    :: file_names(:)
      character(:), allocatable    :: group_names(:)
      integer, allocatable         :: ltimes(:)
      real(RD)                     :: lam_min
      real(RD)                     :: lam_max
      integer                      :: n
      integer                      :: cache_count
      integer                      :: cache_limit
   contains
      private
      procedure, public :: inquire
      procedure, public :: fetch
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure         :: cache_
      procedure         :: load_
   end type hdf5_spectable_t

   ! Interfaces

   interface hdf5_spectable_t
      module procedure hdf5_spectable_t_file_
      module procedure hdf5_spectable_t_files_
   end interface hdf5_spectable_t

   ! Access specifiers

   private

   public :: hdf5_spectable_t

contains

   function hdf5_spectable_t_file_(file_name, group_names, lam_min, lam_max, cache_limit) result(st)

      character(*), intent(in)      :: file_name
      character(*), intent(in)      :: group_names(:)
      real(RD), intent(in)          :: lam_min 
      real(RD), intent(in)          :: lam_max
      integer, intent(in), optional :: cache_limit
      type(hdf5_spectable_t)        :: st

      integer                   :: n
      character(:), allocatable :: file_names(:)

      ! Construct the spectable_t from the file name and list of group names

      n = SIZE(group_names)

      allocate(character(LEN(file_name))::file_names(n))

      file_names = file_name

      st = hdf5_spectable_t(file_names, group_names, lam_min, lam_max, cache_limit)

      ! Finish

      return

   end function hdf5_spectable_t_file_

   !****

   function hdf5_spectable_t_files_(file_names, group_names, lam_min, lam_max, cache_limit) result(st)

      character(*), intent(in)      :: file_names(:)
      character(*), intent(in)      :: group_names(:)
      real(RD), intent(in)          :: lam_min 
      real(RD), intent(in)          :: lam_max
      integer, intent(in), optional :: cache_limit
      type(hdf5_spectable_t)        :: st

      integer :: cache_limit_
      integer :: n

      @:CHECK_BOUNDS(SIZE(group_names), SIZE(file_names))

      if (PRESENT(cache_limit)) then
         cache_limit_ = cache_limit
      else
         cache_limit_ = SIZE(file_names)
      endif

      ! Construct the spectable_t from the lists of file/group names

      n = SIZE(file_names)

      allocate(st%si(n))

      st%file_names = file_names
      st%group_names = group_names

      allocate(st%ltimes(n))
      st%ltimes = 0

      st%lam_min = lam_min
      st%lam_max = lam_max

      st%n = n

      st%cache_count = 0
      st%cache_limit = cache_limit_
      

      ! Finish

      return

   end function hdf5_spectable_t_files_

   !****

   subroutine inquire(self, n, lam_min, lam_max)

      class(hdf5_spectable_t), intent(in) :: self
      integer, intent(out), optional      :: n
      real(RD), intent(out), optional     :: lam_min
      real(RD), intent(out), optional     :: lam_max

      ! Inquire metadata

      if (PRESENT(n)) n = self%n

      if (PRESENT(lam_min)) lam_min = self%lam_min
      if (PRESENT(lam_max)) lam_max = self%lam_max

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine fetch(self, i, si, stat)

      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      type(specint_t), intent(out)           :: si
      integer, intent(out), optional         :: stat

      ! Fetch the i'th specint_t

      if (self%cache_limit > 0) then

         call self%cache_(i, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if
         
         si = self%si(i)

      else

         call self%load_(i, si, stat)

      end if

      ! Finish

      return

   end subroutine fetch

   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, i, ${arg_var}$, lam, res, stat)

         class(hdf5_spectable_t), intent(inout) :: self
         integer, intent(in)                    :: i
         ${arg_type}$, intent(in)               :: ${arg_var}$
         real(RD), intent(in)                   :: lam(:)
         real(RD), intent(out)                  :: res(:)
         integer, intent(out), optional         :: stat

         type(specint_t) :: si

         ! Do the interpolation

         if (self%cache_limit > 0) then

            call self%cache_(i, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call self%si(i)%interp_${name}$(${arg_var}$, lam, res, stat)

         else

            call self%load_(i, si, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call si%interp_${name}$(${arg_var}$, lam, res, stat)

         end if

         ! Finish

         return

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name in ('flux', )

      subroutine interp_${name}$(self, i, lam, res, stat)

         class(hdf5_spectable_t), intent(inout) :: self
         integer, intent(in)                    :: i
         real(RD), intent(in)                   :: lam(:)
         real(RD), intent(out)                  :: res(:)
         integer, intent(out), optional         :: stat

         type(specint_t) :: si

         ! Do the interpolation

         if (self%cache_limit > 0) then

            call self%cache_(i, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call self%si(i)%interp_${name}$(lam, res, stat)

         else

            call self%load_(i, si, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call si%interp_${name}$(lam, res, stat)

         end if

         ! Finish

         return

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine cache_(self, i, stat)

      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      integer, intent(out), optional         :: stat

      integer :: j

      ! Update the cache to ensure the i'th entry is present

      if (self%ltimes(i) > 0) then

         ! Entry is already in the cache; update the lifetime counters

         where (self%ltimes > self%ltimes(i))
            self%ltimes = self%ltimes - 1
         end where

      else

         ! Entry is not in the cache; load it

         if (self%cache_count == self%cache_limit) then

            ! Evict the oldest entry to make room

            j = MINLOC(self%ltimes, DIM=1, mask=self%ltimes > 0)

            call flush_(self%si(j))

            where (self%ltimes > 0)
               self%ltimes = self%ltimes - 1
            end where

         else

            self%cache_count = self%cache_count + 1

         end if

         call self%load_(i, self%si(i), stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end if

      self%ltimes(i) = self%cache_count

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   contains

      subroutine flush_(si)

         type(specint_t), intent(out) :: si

      end subroutine flush_

   end subroutine cache_
      
   !****

   subroutine load_(self, i, si, stat)
      
      class(hdf5_spectable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      type(specint_t), intent(out)           :: si
      integer, intent(out), optional         :: stat

      type(hdf5io_t) :: hi
      type(hdf5io_t) :: hi_si

      ! Load the i'th specint_t from file

      hi = hdf5io_t(self%file_names(i), OPEN_FILE_RO)
      hi_si = hdf5io_t(hi, self%group_names(i))

      print *,'Loading file/group:', TRIM(self%file_names(i)), ' / ', TRIM(self%group_names(i))

      call read(hi_si, si, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      endif

      call hi_si%final()
      call hi%final()

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine load_

end module hdf5_spectable_m
