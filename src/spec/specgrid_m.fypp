! Module  : specgrid_m
! Purpose : define specgrid_t type, for representing spectral intensity
!           grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module specgrid_m

   ! Uses
   
   use forum_m

   use ngrid_m
   use specint_m
   use spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: specgrid_t
      private
      class(spectable_t), allocatable :: st
      type(ngrid_t)                   :: ng
      integer, allocatable            :: shape(:)
      integer                         :: rank
   contains
      private
      procedure, public :: inquire
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
!      procedure, public :: apply_passband
   end type specgrid_t

   ! Interfaces

   interface specgrid_t
      module procedure specgrid_t_
   end interface specgrid_t

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: specgrid_t
   public :: read
   public :: write

   ! Procedures

contains

   function specgrid_t_(st, ng) result (sg)

      class(spectable_t), intent(in) :: st
      type(ngrid_t), intent(in)      :: ng
      type(specgrid_t)               :: sg

      integer              :: n
      integer              :: n_ci
      integer              :: rank
      integer, allocatable :: shape(:)

      ! Construct the specgrid_t

      call st%inquire(n=n)

      call ng%inquire(n_ci=n_ci, rank=rank)

      @:CHECK_BOUNDS(n, n_ci)

      allocate(shape(rank))

      call ng%inquire(shape=shape)

      sg%st = st
      sg%ng = ng

      sg%shape = shape
      sg%rank = rank

      ! Finish

      return

   end function specgrid_t_

   !****

   subroutine inquire(self, lam_min, lam_max, shape, rank, axis_min, axis_max, axis_labels)

      class(specgrid_t), intent(in)       :: self
      real(RD), intent(out), optional     :: lam_min
      real(RD), intent(out), optional     :: lam_max
      integer, intent(out), optional      :: shape(:)
      integer, intent(out), optional      :: rank
      real(RD), intent(out), optional     :: axis_min(:)
      real(RD), intent(out), optional     :: axis_max(:)
      character(*), intent(out), optional :: axis_labels(:)

      if (PRESENT(shape)) then
         @:CHECK_BOUNDS(SIZE(shape), self%rank)
      end if

      ! Inquire metadata

      if (PRESENT(shape)) shape = self%shape
      if (PRESENT(rank)) rank = self%rank

      call self%st%inquire(lam_min=lam_min, lam_max=lam_max)

      call self%ng%inquire(axis_min=axis_min, axis_max=axis_max, axis_labels=axis_labels)

      ! Finish

      return

   end subroutine inquire

   !****

   #:for name, var, arg_var, arg_type in (('intensity', 'I', 'mu', 'real(RD)'), &
                                          ('E_moment', 'E', 'k', 'integer'), &
                                          ('D_moment', 'D', 'l', 'integer'))

      subroutine interp_${name}$(self, vx, ${arg_var}$, lam, ${var}$, stat, vderiv)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: vx(:)
         ${arg_type}$, intent(in)         :: ${arg_var}$
         real(RD), intent(in)             :: lam(:)
         real(RD), intent(out)            :: ${var}$(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: vderiv(:)

         ! Interpolate the data

         call self%ng%interp(proc_, vx, ${var}$, stat, vderiv)

         ! Finish

      contains

         subroutine proc_(vi, f, stat)

            integer, intent(in)            :: vi(:)
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            integer         :: li
            integer         :: ci
            type(specint_t) :: si

            li = self%ng%li_from_vi(vi)
            ci = self%ng%ci_from_li(li)

            call self%st%fetch(ci, si, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call si%interp_${name}$(${arg_var}$, lam, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name, var in (('flux', 'F'),)

      subroutine interp_${name}$(self, vx, lam, ${var}$, stat, vderiv)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: vx(:)
         real(RD), intent(in)             :: lam(:)
         real(RD), intent(out)            :: ${var}$(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: vderiv(:)

         ! Interpolate the ${name}$

         call self%ng%interp(proc_, vx, ${var}$, stat, vderiv)

         ! Finish

      contains

         subroutine proc_(vi, f, stat)

            integer, intent(in)            :: vi(:)
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            integer         :: li
            integer         :: ci
            type(specint_t) :: si

            li = self%ng%li_from_vi(vi)
            ci = self%ng%ci_from_li(li)

            call self%st%fetch(ci, si, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call si%interp_${name}$(lam, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine read_(hi, sg, stat)

      type(hdf5io_t), intent(inout)  :: hi
      type(specgrid_t), intent(out)  :: sg
      integer, intent(out), optional :: stat

      character(TYPE_LEN)             :: type
      type(hdf5io_t)                  :: hi_st
      class(spectable_t), allocatable :: st
      type(hdf5io_t)                  :: hi_ng
      type(ngrid_t)                   :: ng

      ! Read the specgrid_t

      call hi%read_attr('TYPE', type)
      if (type /= 'specgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      hi_st = hdf5io_t(hi, 'st')
      call read(hi_st, st, stat)
      call hi_st%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      hi_ng = hdf5io_t(hi, 'ng')
      call read(hi_ng, ng, stat)
      call hi_ng%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      sg = specgrid_t(st, ng)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read_

   !****

   subroutine write_(hi, sg, stat)

      type(hdf5io_t), intent(inout)   :: hi
      type(specgrid_t), intent(inout) :: sg
      integer, intent(out), optional  :: stat

      type(hdf5io_t) :: hi_st
      type(hdf5io_t) :: hi_ng

      ! Write the specgrid_t

      call hi%write_attr('TYPE', 'specgrid_t')

      call hi%write_attr('shape', sg%shape)
      call hi%write_attr('rank', sg%rank)

      hi_st = hdf5io_t(hi, 'st')
      call write(hi_st, sg%st, stat)
      call hi_st%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      hi_ng = hdf5io_t(hi, 'ng')
      call write(hi_ng, sg%ng, stat)
      call hi_ng%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine write_

end module specgrid_m
