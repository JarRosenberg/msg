! Module  : specgrid_m
! Purpose : define specgrid_t type, for representing spectral intensity
!           grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module specgrid_m

   ! Uses
   
   use forum_m

   use ngrid_m
   use passband_m
   use photgrid_m
   use spec_phottable_m
   use specint_m
   use spectable_m
   use hdf5_spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: specgrid_t
      private
      class(spectable_t), allocatable :: spectable
      type(ngrid_t)                   :: ngrid
      integer, allocatable            :: shape(:)
      integer                         :: rank
   contains
      private
      procedure, public :: inquire
      procedure, public :: config
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure, public :: filter
      procedure, public :: read
      procedure, public :: write
   end type specgrid_t

   ! Interfaces

   interface specgrid_t
      module procedure specgrid_t_
   end interface specgrid_t

   ! Access specifiers

   private

   public :: specgrid_t

   ! Procedures

contains

   function specgrid_t_(spectable, ngrid) result (specgrid)

      class(spectable_t), intent(in) :: spectable
      type(ngrid_t), intent(in)      :: ngrid
      type(specgrid_t)               :: specgrid

      integer              :: n
      integer              :: n_con
      integer              :: rank
      integer, allocatable :: shape(:)

      ! Construct specgrid from the supplied data

      call spectable%inquire(n=n)

      call ngrid%inquire(n_con=n_con, rank=rank)

      @:CHECK_BOUNDS(n, n_con)

      allocate(shape(rank))

      call ngrid%inquire(shape=shape)

      specgrid%spectable = spectable
      specgrid%ngrid = ngrid

      specgrid%shape = shape
      specgrid%rank = rank

      ! Finish

      return

   end function specgrid_t_

   !****

   subroutine inquire(self, lam_min, lam_max, shape, rank, axis_min, axis_max, axis_labels)

      class(specgrid_t), intent(in)       :: self
      real(RD), intent(out), optional     :: lam_min
      real(RD), intent(out), optional     :: lam_max
      integer, intent(out), optional      :: shape(:)
      integer, intent(out), optional      :: rank
      real(RD), intent(out), optional     :: axis_min(:)
      real(RD), intent(out), optional     :: axis_max(:)
      character(*), intent(out), optional :: axis_labels(:)

      if (PRESENT(shape)) then
         @:CHECK_BOUNDS(SIZE(shape), self%rank)
      end if

      ! Inquire metadata

      if (PRESENT(shape)) shape = self%shape
      if (PRESENT(rank)) rank = self%rank

      call self%spectable%inquire(lam_min=lam_min, lam_max=lam_max)

      call self%ngrid%inquire(axis_min=axis_min, axis_max=axis_max, axis_labels=axis_labels)

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine config(self, cache_limit, cache_lam_min, cache_lam_max, stat)
      
      class(specgrid_t), intent(inout) :: self
      integer, intent(in), optional    :: cache_limit
      real(RD), intent(in), optional   :: cache_lam_min
      real(RD), intent(in), optional   :: cache_lam_max
      integer, intent(out), optional   :: stat

      ! Configure parameters

      select type(spectable => self%spectable)
      type is(hdf5_spectable_t)
         call spectable%config(cache_limit=cache_limit, cache_lam_min=cache_lam_min, cache_lam_max=cache_lam_max, stat=stat)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      return

   end subroutine config

   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, x_vec, ${arg_var}$, lam, res, stat, deriv_vec)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: x_vec(:)
         ${arg_type}$, intent(in)         :: ${arg_var}$
         real(RD), intent(in)             :: lam(:)
         real(RD), intent(out)            :: res(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: deriv_vec(:)

         ! Interpolate ${name}$

         call self%ngrid%interp(data_proc_, x_vec, res, stat, deriv_vec)

         ! Finish

      contains

         subroutine data_proc_(i_vec, f, stat)

            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            integer :: i_lin
            integer :: i_con

            i_lin = self%ngrid%lin_from_vec(i_vec)
            i_con = self%ngrid%con_from_lin(i_lin)

            call self%spectable%interp_${name}$(i_con, ${arg_var}$, lam, f, stat)

            return

         end subroutine data_proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name in ('flux',)

      subroutine interp_${name}$(self, x_vec, lam, res, stat, deriv_vec)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: x_vec(:)
         real(RD), intent(in)             :: lam(:)
         real(RD), intent(out)            :: res(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: deriv_vec(:)

         ! Interpolate ${name}$

         call self%ngrid%interp(data_proc_, x_vec, res, stat, deriv_vec)

         ! Finish

      contains

         subroutine data_proc_(i_vec, f, stat)

            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            integer :: i_lin
            integer :: i_con

            i_lin = self%ngrid%lin_from_vec(i_vec)
            i_con = self%ngrid%con_from_lin(i_lin)

            call self%spectable%interp_${name}$(i_con, lam, f, stat)

            return

         end subroutine data_proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine filter(self, passband, photgrid, stat)

      class(specgrid_t), intent(inout) :: self
      type(passband_t), intent(in)     :: passband
      type(photgrid_t), intent(out)    :: photgrid
      integer, intent(out), optional   :: stat

      ! Filter the specgrid through the passband to yield photgrid

      photgrid = photgrid_t(spec_phottable_t(self%spectable, passband), self%ngrid)

      ! Finish

      return

   end subroutine filter

   !****

   subroutine read(self, hdf5io, stat)

      class(specgrid_t), intent(out) :: self
      type(hdf5io_t), intent(inout)  :: hdf5io
      integer, intent(out), optional :: stat

      character(TYPE_LEN)    :: type
      type(hdf5io_t)         :: hdf5io_spectable
      type(hdf5_spectable_t) :: spectable
      type(hdf5io_t)         :: hdf5io_ngrid
      type(ngrid_t)          :: ngrid

      ! Read the specgrid

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'specgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      hdf5io_ngrid = hdf5io_t(hdf5io, 'ngrid')
      call ngrid%read(hdf5io_ngrid, stat)
      call hdf5io_ngrid%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      hdf5io_spectable = hdf5io_t(hdf5io, 'spectable')
      call spectable%read(hdf5io_spectable, stat)
      call hdf5io_spectable%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      select type(self)
      type is(specgrid_t)
         self = specgrid_t(spectable, ngrid)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(specgrid_t), intent(inout) :: self
      type(hdf5io_t), intent(inout)    :: hdf5io
      integer, intent(out), optional   :: stat

      type(hdf5io_t) :: hdf5io_spectable
      type(hdf5io_t) :: hdf5io_ngrid

      ! Write the specgrid

      call hdf5io%write_attr('TYPE', 'specgrid_t')

      call hdf5io%write_attr('shape', self%shape)
      call hdf5io%write_attr('rank', self%rank)

      hdf5io_spectable = hdf5io_t(hdf5io, 'spectable')
      call self%spectable%write(hdf5io_spectable, stat)
      call hdf5io_spectable%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      hdf5io_ngrid = hdf5io_t(hdf5io, 'ngrid')
      call self%ngrid%write(hdf5io_ngrid, stat)
      call hdf5io_ngrid%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine write

end module specgrid_m
