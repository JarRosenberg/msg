! Module  : spectable_sm
! Purpose : I/O routines for spectable_m
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (spectable_m) spectable_sm

   ! Uses

   use forum_m

   use specint_m
   use hdf5_spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

contains

   subroutine read_(hdf5io, spectable, stat, cache_limit)

      type(hdf5io_t), intent(inout)                :: hdf5io
      class(spectable_t), allocatable, intent(out) :: spectable
      integer, intent(out), optional               :: stat
      integer, intent(in), optional                :: cache_limit

      character(TYPE_LEN)       :: type
      integer                   :: n
      real(RD)                  :: lam_min
      real(RD)                  :: lam_max
      character(:), allocatable :: file_name
      character(:), allocatable :: group_name
      character(:), allocatable :: group_names(:)
      integer                   :: i

      ! Read the spectable_t

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'spectable_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hdf5io%read_attr('n', n)

      call hdf5io%read_attr('lam_min', lam_min)
      call hdf5io%read_attr('lam_max', lam_max)

      call hdf5io%inquire(file_name=file_name, group_name=group_name)

      group_names = [(specints_group_name_(i), i=1,n)]

      spectable = hdf5_spectable_t(file_name, group_name//'/'//group_names, &
                                   lam_min, lam_max, cache_limit)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read_

   !****

   subroutine write_(hdf5io, spectable, stat)

      type(hdf5io_t), intent(inout)     :: hdf5io
      class(spectable_t), intent(inout) :: spectable
      integer, intent(out), optional    :: stat

      integer         :: n
      real(RD)        :: lam_min
      real(RD)        :: lam_max
      integer         :: i
      type(hdf5io_t)  :: hdf5io_specint
      type(specint_t) :: specint

      ! Write the spectable_t

      call hdf5io%write_attr('TYPE', 'spectable_t')

      call spectable%inquire(n=n, lam_min=lam_min, lam_max=lam_max)

      call hdf5io%write_attr('n', n)
      
      call hdf5io%write_attr('lam_min', lam_min)
      call hdf5io%write_attr('lam_max', lam_max)

      do i = 1, n

         ! Fetch specint

         call spectable%fetch(i, specint, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         ! Write it

         hdf5io_specint = hdf5io_t(hdf5io, specints_group_name_(i))
         call write(hdf5io_specint, specint, stat)
         call hdf5io_specint%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end do

      ! Finish

      return

   end subroutine write_

   !****

   function specints_group_name_(i) result(name)

      integer, intent(in) :: i
      character(256)      :: name

      write(name, 100) i
100   format('specints(',I0,')')
      
   end function specints_group_name_

end submodule spectable_sm
