! Module  : axis_m
! Purpose : define axis_t type, representing a grid axis
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module axis_m

   ! Uses

   use forum_m, locate_ => locate

   use range_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   integer, parameter :: LABEL_LEN = 16

   ! Derived-type definitions

   type axis_t
      private
      class(range_t), allocatable :: ra
      character(LABEL_LEN)        :: label
   contains
      private
      procedure, public :: inquire
      procedure, public :: get
      procedure, public :: locate
   end type axis_t

   ! Interfaces

   interface axis_t
      module procedure axis_t_
   end interface axis_t

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: LABEL_LEN
   public :: axis_t
   public :: read
   public :: write

   ! Procedures

contains

   function axis_t_(ra, label) result (ax)

      class(range_t), intent(in) :: ra
      character(*), intent(in)   :: label
      type(axis_t)               :: ax

      ! Construct the axis_t from the supplied data

      ax%ra = ra

      ax%label = label

      ! Finish

      return

   end function axis_t_

   !****

   subroutine inquire(self, n, min, max, label)

      class(axis_t), intent(in)           :: self
      integer, intent(out), optional      :: n
      real(RD), intent(out), optional     :: min
      real(RD), intent(out), optional     :: max
      character(*), intent(out), optional :: label

      ! Inquire metadata

      if (PRESENT(label)) label = self%label

      call self%ra%inquire(n=n, min=min, max=max)

      ! Finish

      return

   end subroutine inquire

   !****

   subroutine get(self, i, x, stat)

      class(axis_t), intent(in)      :: self
      integer, intent(in)            :: i
      real(RD), intent(out)          :: x
      integer, intent(out), optional :: stat

      ! Get an x value

      call self%ra%get(i, x, stat)

      ! Finish

      return

   end subroutine get

   !****

   subroutine locate(self, x, i)

      class(axis_t), intent(in)      :: self
      real(RD), intent(in)           :: x
      integer, intent(inout)         :: i

      ! Locate where along the axis x falls

      call self%ra%locate(x, i)

      ! Finish

      return

   end subroutine locate

   !****

   subroutine read_(hi, ax, stat)

      type(hdf5io_t), intent(inout)  :: hi
      type(axis_t), intent(out)      :: ax
      integer, intent(out), optional :: stat

      character(TYPE_LEN)         :: type
      character(LABEL_LEN)        :: label
      type(hdf5io_t)              :: hi_ra
      class(range_t), allocatable :: ra

      ! Read the axis_t

      call hi%read_attr('TYPE', type)
      if (type /= 'axis_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hi%read_attr('label', label)

      hi_ra = hdf5io_t(hi, 'ra')
      call read(hi_ra, ra, stat)
      call hi_ra%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ax = axis_t(ra, label)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read_

   !****

   subroutine write_(hi, ax, stat)

      type(hdf5io_t), intent(inout)  :: hi
      type(axis_t), intent(in)       :: ax
      integer, intent(out), optional :: stat

      type(hdf5io_t) :: hi_ra
      
      ! Writethe axis_t

      call hi%write_attr('TYPE', 'axis_t')

      call hi%write_attr('label', ax%label)

      hi_ra = hdf5io_t(hi, 'ra')
      call write(hi_ra, ax%ra, stat)
      call hi_ra%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine write_

end module axis_m
