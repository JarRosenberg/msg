#:include 'forum.inc'

module test_fit_m

  ! Uses

  use kinds_m
  use fit_m

  use ISO_FORTRAN_ENV

  ! No implicit typing

  implicit none

  ! Access specifiers

  private

  public :: test

contains
 
   subroutine test ()

      call test_gls_fit_()

   end subroutine test

   !****

   subroutine test_gls_fit_ ()

      integer, parameter :: n_x = 10
      integer, parameter :: n_a = 4

      real(R8) :: x(n_x)
      real(R8) :: y(n_x)
      real(R8) :: a_chk(n_a)
      real(R8) :: a(n_a)

      call gls_fit_arrange_()
      call gls_fit_act_()
      call gls_fit_assert_()

   contains

      subroutine gls_fit_arrange_()

         integer :: i

         x =  [(i,i=1,n_x)]
         y = SIN(x)
         a_chk = [ &
              3.294862083657227547e+00_R8, &
              -2.361968464010496760e+00_R8, &
              4.583475895500784825e-01_R8, &
              -2.581586410629988990e-02_R8 &
              ]

      end subroutine gls_fit_arrange_

      !****
  
      subroutine gls_fit_act_()

         call gls_fit(x, y, gls_fit_func_, a)

      end subroutine gls_fit_act_

      !****

      function gls_fit_func_(x, n) result (func)

         real(R8), intent(in) :: x
         integer, intent(in)  :: n
         real(R8)             :: func(n)
         
         integer :: i
         
         do i = 1, n
            func(i) = x**(i-1)
         end do

      end function gls_fit_func_

      !****

      subroutine gls_fit_assert_()

         real(R8) :: err(n_a)

         err = (a - a_chk)/a_chk
         
         if (ALL(ABS(err) < 1E-13)) then
            print *,'PASS'
         else
            print *,'FAIL:', err
         end if

      end subroutine gls_fit_assert_

   end subroutine test_gls_fit_

end module test_fit_m
 
