! Module  : phottable_m
! Purpose : define phottable_t abstract type, for representing a table
!           of photometric intensities
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module phottable_m

   ! Uses

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, abstract :: phottable_t
   contains
      procedure(inquire_), deferred :: inquire
      procedure(fetch_), deferred   :: fetch
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure(interp_${name}$_), deferred :: interp_${name}$
      #:endfor
   end type phottable_t

   ! Interfaces

   abstract interface

      subroutine inquire_(self, n)
         import phottable_t
         class(phottable_t), intent(in)  :: self
         integer, intent(out), optional  :: n
      end subroutine inquire_

      subroutine fetch_(self, i, pi, stat)
         use photint_m
         import phottable_t
         class(phottable_t), intent(inout) :: self
         integer, intent(in)               :: i
         type(photint_t), intent(out)      :: pi
         integer, intent(out), optional    :: stat
      end subroutine fetch_

      #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                        ('E_moment', 'k', 'integer'), &
                                        ('D_moment', 'l', 'integer'))

         subroutine interp_${name}$_(self, i, ${arg_var}$, res, stat)
            use forum_m
            import phottable_t
            class(phottable_t), intent(inout) :: self
            integer, intent(in)               :: i
            ${arg_type}$, intent(in)          :: ${arg_var}$
            real(RD), intent(out)             :: res
            integer, intent(out), optional    :: stat
         end subroutine interp_${name}$_

      #:endfor

      #:for name in (('flux'),)

         subroutine interp_${name}$_(self, i, res, stat)
            use forum_m
            import phottable_t
            class(phottable_t), intent(inout) :: self
            integer, intent(in)               :: i
            real(RD), intent(out)             :: res
            integer, intent(out), optional    :: stat
         end subroutine interp_${name}$_

      #:endfor

   end interface

   interface read

      module subroutine read_(hi, pt, stat)
         use hdf5io_m
         type(hdf5io_t), intent(inout)                :: hi
         class(phottable_t), allocatable, intent(out) :: pt
         integer, intent(out), optional               :: stat
      end subroutine read_

   end interface read

   interface write

      module subroutine write_(hi, pt, stat)
         use hdf5io_m
         type(hdf5io_t), intent(inout)     :: hi
         class(phottable_t), intent(inout) :: pt
         integer, intent(out), optional    :: stat
      end subroutine write_

   end interface write

   ! Access specifiers

   private

   public :: phottable_t
   public :: read
   public :: write

end module phottable_m
