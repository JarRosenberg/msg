! Module  : dyn_photint_m
! Purpose : define dyn_photint_t type, for adding dynamic loading/
!           convolution to the specint_t type
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module dyn_photint_m

   ! Uses

   use kinds_m
   use hdf5io_m
   use order_m

   use photint_m
   use passband_m
   use specint_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(photint_t) :: dyn_photint_t
      private
      type(hdf5io_t)                 :: hi
      class(passband_t), allocatable :: pb
      logical                        :: loaded = .FALSE.
   contains
      private
      #:for name in ('intensity', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure         :: load_
   end type dyn_photint_t

   ! Interfaces

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   interface write_dyn
      module procedure write_
   end interface write_dyn

   ! Access specifiers

   private

   public :: dyn_photint_t
   public :: read
   public :: write
   public :: write_dyn

   ! Procedures

contains

   #:for name, var, arg_var, arg_type in (('intensity', 'I', 'mu', 'real(RD)'), &
                                          ('D_moment', 'D', 'l', 'integer'))

      subroutine interp_${name}$(self, ${arg_var}$, ${var}$, stat)

         class(dyn_photint_t), intent(inout) :: self
         ${arg_type}$, intent(in)            :: ${arg_var}$
         real(RD), intent(out)               :: ${var}$
         integer, intent(out), optional      :: stat

         ! If necessary, load

         if (.NOT. self%loaded) then

            call self%load_(stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            endif

         endif
         
         ! Pass

         call self%photint_t%interp_${name}$(${arg_var}$, ${var}$, stat)

         ! Finish

         return

      end subroutine interp_${name}$

   #:endfor
      
   !****

   #:for name, var in (('flux', 'F'), )

      subroutine interp_${name}$(self, ${var}$, stat)

         class(dyn_photint_t), intent(inout) :: self
         real(RD), intent(out)               :: ${var}$
         integer, intent(out), optional      :: stat

         ! If necessary, load

         if (.NOT. self%loaded) then

            call self%load_(stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            endif

         endif
         
         ! Pass

         call self%photint_t%interp_${name}$(${var}$, stat)

         ! Finish

         return

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine load_(self, stat)
      
      class(dyn_photint_t), intent(inout) :: self
      integer, intent(out), optional      :: stat

      type(specint_t) :: si

      ! Load the photint

      call read(self%hi, si)
      call self%hi%final()

      call si%apply_passband(self%pb, self%photint_t, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      endif

      self%loaded = .TRUE.

      ! Free up space used by the passband

      deallocate(self%pb)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine load_

   !****

   subroutine read_(hi, pb, pi, stat)

      type(hdf5io_t), intent(inout)    :: hi
      type(passband_t), intent(in)     :: pb
      type(dyn_photint_t), intent(out) :: pi
      integer, intent(out), optional   :: stat

      character(TYPE_LEN) :: type

      ! Read the dyn_photint_t (the photint_t supertype is set in a
      ! later call to load_)

      call hi%read_attr('TYPE', type)
      if (type /= 'specint_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      pi%hi = hi
      pi%pb = pb

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read_

   !****

   subroutine write_(hi, pi)

      type(hdf5io_t), intent(inout)      :: hi
      type(dyn_photint_t), intent(inout) :: pi

      ! Write the dyn_photint_t

      if (.NOT. pi%loaded) call pi%load_()

      call write(hi, pi%photint_t)

      ! Finish

      return

   end subroutine write_
   
end module dyn_photint_m
