! Module  : phottable_sm
! Purpose : I/O routines for phottable_m
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

submodule (phottable_m) phottable_sm

   ! Uses

   use forum_m

   use photint_m
   use hdf5_phottable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

contains

   subroutine read_(hdf5io, phottable, stat)

      type(hdf5io_t), intent(inout)                :: hdf5io
      class(phottable_t), allocatable, intent(out) :: phottable
      integer, intent(out), optional               :: stat

      character(TYPE_LEN)       :: type
      integer                   :: n
      character(:), allocatable :: file_name
      character(:), allocatable :: group_name
      character(:), allocatable :: group_names(:)
      integer                   :: i

      ! Read the phottable_t

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'phottable_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hdf5io%read_attr('n', n)

      call hdf5io%inquire(file_name=file_name, group_name=group_name)

      group_names = [(photint_group_name_(i), i=1,n)]

      phottable = hdf5_phottable_t(file_name, group_name//'/'//group_names)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read_

   !****

   subroutine write_(hdf5io, phottable, stat)

      type(hdf5io_t), intent(inout)     :: hdf5io
      class(phottable_t), intent(inout) :: phottable
      integer, intent(out), optional    :: stat

      integer         :: n
      integer         :: i
      type(hdf5io_t)  :: hdf5io_photint
      type(photint_t) :: photint

      ! Write the phottable_t

      call hdf5io%write_attr('TYPE', 'phottable_t')

      call phottable%inquire(n=n)

      call hdf5io%write_attr('n', n)
      
      do i = 1, n

         ! Fetch photint

         call phottable%fetch(i, photint, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

         ! Write it

         hdf5io_photint = hdf5io_t(hdf5io, photint_group_name_(i))
         call write(hdf5io_photint, photint, stat)
         call hdf5io_photint%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end do

      ! Finish

      return

   end subroutine write_

   !****

   function photint_group_name_(i) result(name)

      integer, intent(in) :: i
      character(256)      :: name

      write(name, 100) i
100   format('photint(',I0,')')
      
   end function photint_group_name_

end submodule phottable_sm
