! Module  : photgrid_m
! Purpose : Define photgrid_t type, for representing photometric intensity
!           grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module photgrid_m

   ! Uses
   
   use forum_m

   use axis_m
   use ngrid_m
   use photcache_m
   use photint_m
   use photsource_m
   use hdf5_photsource_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: photgrid_t
      private
      class(photsource_t), allocatable :: photsource
      type(photcache_t)                :: photcache
      type(ngrid_t)                    :: ngrid
   contains
      private
      procedure, public :: get_rank
      procedure, public :: get_axis
      procedure, public :: get_cache_count
      procedure, public :: get_cache_limit
      procedure, public :: set_cache_limit
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure, public :: read
      procedure, public :: write
   end type photgrid_t

   ! Interfaces

   interface photgrid_t
      module procedure photgrid_t_
   end interface photgrid_t

   ! Access specifiers

   private

   public :: photgrid_t

   ! Procedures
   
contains

   function photgrid_t_(photsource, ngrid) result (photgrid)

      class(photsource_t), intent(in) :: photsource
      type(ngrid_t), intent(in)       :: ngrid
      type(photgrid_t)                :: photgrid

      integer :: n
      integer :: n_con

      ! Construct photgrid from the supplied data

      call photsource%get_n(n)
      call ngrid%get_n_con(n_con)

      @:CHECK_BOUNDS(n, n_con)

      photgrid%photsource = photsource
      photgrid%photcache = photcache_t(n)

      photgrid%ngrid = ngrid

      ! Finish

      return

   end function photgrid_t_

   !****

   subroutine get_rank(self, rank)

      class(photgrid_t), intent(in) :: self
      integer, intent(out)          :: rank

      ! Get the rank

      call self%ngrid%get_rank(rank)

      ! Finish

      return

   end subroutine get_rank

   !****

   subroutine get_axis(self, i, axis)

      class(photgrid_t), intent(in) :: self
      integer, intent(in)           :: i
      type(axis_t), intent(out)     :: axis

      ! Get the i'th axis

      call self%ngrid%get_axis(i, axis)

      ! Finish

      return

   end subroutine get_axis

   !****

   subroutine get_cache_count(self, cache_count)

      class(photgrid_t), intent(in) :: self
      integer, intent(out)          :: cache_count

      ! Get the cache occupancy

      call self%photcache%get_count(cache_count)

      ! Finish

      return

   end subroutine get_cache_count

   !****

   subroutine get_cache_limit(self, cache_limit)

      class(photgrid_t), intent(in) :: self
      integer, intent(out)          :: cache_limit

      ! Get the cache occupancy limit

      call self%photcache%get_limit(cache_limit)

      ! Finish

      return

   end subroutine get_cache_limit

   !****

   subroutine set_cache_limit(self, cache_limit, stat)

      class(photgrid_t), intent(inout) :: self
      integer, intent(in), optional    :: cache_limit
      integer, intent(out), optional   :: stat

      ! Set the cache occupancy limit

      call self%photcache%set_limit(cache_limit, stat)

      ! Finish

      return

   end subroutine set_cache_limit
 
   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, x_vec, ${arg_var}$, res, stat, deriv_vec)

         class(photgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:)
         ${arg_type}$, intent(in)                 :: ${arg_var}$
         real(RD), intent(out)                    :: res
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)

         ! Interpolate ${name}$

         call self%ngrid%interp(data_proc_, x_vec, res, stat, deriv_vec)

         ! Finish

         return

      contains

         subroutine data_proc_(i_vec, f, stat)

            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            integer                       :: i_lin
            integer                       :: i_con
            class(photint_t), allocatable :: photint

            i_lin = self%ngrid%lin_from_vec(i_vec)
            i_con = self%ngrid%con_from_lin(i_lin)

            call self%photcache%fetch(i_con, fetch_proc_, photint, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call photint%interp_${name}$(${arg_var}$, f, stat)

            return

         end subroutine data_proc_

         subroutine fetch_proc_(i, photint, stat)

            integer, intent(in)                        :: i
            class(photint_t), allocatable, intent(out) :: photint
            integer, intent(out), optional             :: stat

            call self%photsource%fetch(i, photint, stat)

            return

         end subroutine fetch_proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name in ('flux',)

      subroutine interp_${name}$(self, x_vec, res, stat, deriv_vec)

         class(photgrid_t), target, intent(inout) :: self
         real(RD), intent(in)                     :: x_vec(:)
         real(RD), intent(out)                    :: res
         integer, intent(out), optional           :: stat
         logical, intent(in), optional            :: deriv_vec(:)

         ! Interpolate the ${name}$

         call self%ngrid%interp(data_proc_, x_vec, res, stat, deriv_vec)

         ! Finish

      contains

         subroutine data_proc_(i_vec, f, stat)

            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            integer                       :: i_lin
            integer                       :: i_con
            class(photint_t), allocatable :: photint

            i_lin = self%ngrid%lin_from_vec(i_vec)
            i_con = self%ngrid%con_from_lin(i_lin)

            call self%photcache%fetch(i_con, fetch_proc_, photint, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

            call photint%interp_${name}$(f, stat)

            return

         end subroutine data_proc_
 
        subroutine fetch_proc_(i, photint, stat)

            integer, intent(in)                         :: i
            class(photint_t), allocatable, intent(out)  :: photint
            integer, intent(out), optional              :: stat

            call self%photsource%fetch(i, photint, stat)

            return

         end subroutine fetch_proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine read(self, hdf5io, stat)

      class(photgrid_t), intent(out) :: self
      type(hdf5io_t), intent(inout)  :: hdf5io
      integer, intent(out), optional :: stat

      character(TYPE_LEN)       :: type
      type(hdf5io_t)            :: hdf5io_photsource
      integer                   :: n
      character(:), allocatable :: file_name
      character(:), allocatable :: group_name
      character(:), allocatable :: file_names(:)
      character(:), allocatable :: group_names(:)
      integer                   :: i
      type(hdf5_photsource_t)   :: photsource
      type(hdf5io_t)            :: hdf5io_ngrid
      type(ngrid_t)             :: ngrid

      ! Read the photgrid

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'photgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      hdf5io_photsource = hdf5io_t(hdf5io, 'photsource')
      call hdf5io_photsource%read_attr('n', n)
      call hdf5io_photsource%final()

      call hdf5io%inquire(file_name=file_name, group_name=group_name)

      allocate(character(LEN(file_name))::file_names(n))
      allocate(character(LEN(group_name)+24)::group_names(n))

      name_loop : do i = 1, n

         file_names(i) = file_name
         group_names(i) = group_name//'/photsource/'//photint_group_name_(i)

      end do name_loop
      
      photsource = hdf5_photsource_t(file_names, group_names)

      hdf5io_ngrid = hdf5io_t(hdf5io, 'ngrid')
      call ngrid%read(hdf5io_ngrid, stat)
      call hdf5io_ngrid%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      select type(self)
      type is(photgrid_t)
         self = photgrid_t(photsource, ngrid)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(photgrid_t), intent(inout) :: self
      type(hdf5io_t), intent(inout)    :: hdf5io
      integer, intent(out), optional   :: stat

      integer                       :: n
      type(hdf5io_t)                :: hdf5io_photsource
      integer                       :: i
      class(photint_t), allocatable :: photint
      type(hdf5io_t)                :: hdf5io_photint
      type(hdf5io_t)                :: hdf5io_ngrid

      ! Write the photgrid

      call hdf5io%write_attr('TYPE', 'photgrid_t')

      call self%ngrid%get_n_con(n)

      hdf5io_photsource = hdf5io_t(hdf5io, 'photsource')

      call hdf5io_photsource%write_attr('n', n)

      write_loop: do i = 1, n

         call self%photcache%fetch(i, fetch_proc_, photint, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) exit write_loop
         end if

         hdf5io_photint = hdf5io_t(hdf5io_photsource, photint_group_name_(i))
         call photint%write(hdf5io_photint, stat)
         call hdf5io_photint%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) exit write_loop
         end if

      end do write_loop

      call hdf5io_photsource%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      hdf5io_ngrid = hdf5io_t(hdf5io, 'ngrid')
      call self%ngrid%write(hdf5io_ngrid, stat)
      call hdf5io_ngrid%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   contains

      subroutine fetch_proc_(i, photint, stat)

         integer, intent(in)                        :: i
         class(photint_t), allocatable, intent(out) :: photint
         integer, intent(out), optional             :: stat

         call self%photsource%fetch(i, photint, stat)

         return

      end subroutine fetch_proc_

   end subroutine write

   !****

   function photint_group_name_(i) result(name)

      integer, intent(in) :: i
      character(256)      :: name

      write(name, 100) i
100   format('photints[',I0,']')
      
   end function photint_group_name_

end module photgrid_m
