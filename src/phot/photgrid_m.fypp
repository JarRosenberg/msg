! Module  : photgrid_m
! Purpose : define photgrid_t type, for representing photometric intensity
!           grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module photgrid_m

   ! Uses
   
   use forum_m

   use ngrid_m
   use photint_m
   use phottable_m
   use hdf5_phottable_m
   use spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: photgrid_t
      private
      class(phottable_t), allocatable :: phottable
      type(ngrid_t)                   :: ngrid
      integer, allocatable            :: shape(:)
      integer                         :: rank
   contains
      private
      procedure, public :: inquire
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure, public :: read
      procedure, public :: write
   end type photgrid_t

   ! Interfaces

   interface photgrid_t
      module procedure photgrid_t_
   end interface photgrid_t

   ! Access specifiers

   private

   public :: photgrid_t

   ! Procedures
   
contains

   function photgrid_t_(phottable, ngrid) result(photgrid)

      class(phottable_t), intent(in) :: phottable
      type(ngrid_t), intent(in)      :: ngrid
      type(photgrid_t)               :: photgrid

      integer              :: n
      integer              :: n_con
      integer              :: rank
      integer, allocatable :: shape(:)

      ! Construct photgrid from the supplied data

      call phottable%inquire(n=n)

      call ngrid%inquire(n_con=n_con, rank=rank)

      @:CHECK_BOUNDS(n, n_con)

      allocate(shape(rank))

      call ngrid%inquire(shape=shape)

      photgrid%phottable = phottable
      photgrid%ngrid = ngrid

      photgrid%shape = shape
      photgrid%rank = rank

      ! Finish

      return

   end function photgrid_t_

   !****

   subroutine inquire(self, shape, rank, axis_min, axis_max, axis_labels)

      class(photgrid_t), intent(in)       :: self
      integer, intent(out), optional      :: shape(:)
      integer, intent(out), optional      :: rank
      real(RD), intent(out), optional     :: axis_min(:)
      real(RD), intent(out), optional     :: axis_max(:)
      character(*), intent(out), optional :: axis_labels(:)

      if (PRESENT(shape)) then
         @:CHECK_BOUNDS(SIZE(shape), self%rank)
      end if

      ! Inquire metadata

      if (PRESENT(shape)) shape = self%shape
      if (PRESENT(rank)) rank = self%rank

      call self%ngrid%inquire(axis_min=axis_min, axis_max=axis_max, axis_labels=axis_labels)

      ! Finish

      return

   end subroutine inquire

   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, x_vec, ${arg_var}$, res, stat, deriv_vec)

         class(photgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: x_vec(:)
         ${arg_type}$, intent(in)         :: ${arg_var}$
         real(RD), intent(out)            :: res
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: deriv_vec(:)

         ! Interpolate ${name}$

         call self%ngrid%interp(proc_, x_vec, res, stat, deriv_vec)

         ! Finish

         return

      contains

         subroutine proc_(i_vec, f, stat)

            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            integer :: i_lin
            integer :: i_con
            
            i_lin = self%ngrid%lin_from_vec(i_vec)
            i_con = self%ngrid%con_from_lin(i_lin)

            call self%phottable%interp_${name}$(i_con, ${arg_var}$, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name in ('flux',)

      subroutine interp_${name}$(self, x_vec, res, stat, deriv_vec)

         class(photgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: x_vec(:)
         real(RD), intent(out)            :: res
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: deriv_vec(:)

         ! Interpolate the ${name}$

         call self%ngrid%interp(proc_, x_vec, res, stat, deriv_vec)

         ! Finish

      contains

         subroutine proc_(i_vec, f, stat)

            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            integer :: i_lin
            integer :: i_con

            i_lin = self%ngrid%lin_from_vec(i_vec)
            i_con = self%ngrid%con_from_lin(i_lin)

            call self%phottable%interp_${name}$(i_con, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****
      
   subroutine read(self, hdf5io, stat)

      class(photgrid_t), intent(out) :: self
      type(hdf5io_t), intent(inout)  :: hdf5io
      integer, intent(out), optional :: stat

      character(TYPE_LEN)    :: type
      type(hdf5io_t)         :: hdf5io_phottable
      type(hdf5_phottable_t) :: phottable
      type(hdf5io_t)         :: hdf5io_ngrid
      type(ngrid_t)          :: ngrid

      ! Read the photgrid_t

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'photgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      hdf5io_phottable = hdf5io_t(hdf5io, 'phottable')
      call phottable%read(hdf5io_phottable, stat)
      call hdf5io_phottable%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      hdf5io_ngrid = hdf5io_t(hdf5io, 'ngrid')
      call ngrid%read(hdf5io_ngrid, stat)
      call hdf5io_ngrid%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      select type(self)
      type is(photgrid_t)
         self = photgrid_t(phottable, ngrid)
      class default
         @:ABORT('invalid type')
      end select

      ! Finish

      return

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(photgrid_t), intent(inout) :: self
      type(hdf5io_t), intent(inout)    :: hdf5io
      integer, intent(out), optional   :: stat

      type(hdf5io_t) :: hdf5io_phottable
      type(hdf5io_t) :: hdf5io_ngrid

      ! Write the photgrid_t

      call hdf5io%write_attr('TYPE', 'photgrid_t')

      call hdf5io%write_attr('shape', self%shape)
      call hdf5io%write_attr('rank', self%rank)

      hdf5io_phottable = hdf5io_t(hdf5io, 'phottable')
      call self%phottable%write(hdf5io_phottable, stat)
      call hdf5io_phottable%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if
      
      hdf5io_ngrid = hdf5io_t(hdf5io, 'ngrid')
      call self%ngrid%write(hdf5io_ngrid, stat)
      call hdf5io_ngrid%final()
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Finish

      return

   end subroutine write

end module photgrid_m
