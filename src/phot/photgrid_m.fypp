! Module  : photgrid_m
! Purpose : define photgrid_t type, for representing photometric intensity
!           grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module photgrid_m

   ! Uses
   
   use forum_m

   use ngrid_m
   use passband_m
   use photint_m
   use dyn_photint_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: photgrid_t
      private
      class(photint_t), allocatable :: pi(:)
      type(ngrid_t)                 :: ng
      integer, allocatable          :: shape(:)
      integer                       :: rank
   contains
      private
      procedure, public :: inquire
      #:for name in ('intensity', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
   end type photgrid_t

   ! Interfaces

   interface photgrid_t
      module procedure photgrid_t_
   end interface photgrid_t

   interface read
      module procedure read_
      module procedure read_specgrid_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: photgrid_t
   public :: read
   public :: write

   ! Procedures
   
contains

   function photgrid_t_(pi, ng) result (pg)

      class(photint_t), intent(in) :: pi(:)
      type(ngrid_t), intent(in)    :: ng
      type(photgrid_t)             :: pg

      integer              :: rank
      integer, allocatable :: shape(:)

      ! Construct the photgrid_t

      call ng%inquire(rank=rank)

      allocate(shape(rank))

      call ng%inquire(shape=shape)

      @:CHECK_BOUNDS(SIZE(pi), PRODUCT(shape))

      allocate(pg%pi, SOURCE=pi)

      pg%ng = ng

      pg%shape = shape
      pg%rank = rank

      ! Finish

      return

   end function photgrid_t_

   !****

   subroutine inquire(self, shape, rank, axis_min, axis_max, axis_labels)

      class(photgrid_t), intent(in)       :: self
      integer, intent(out), optional      :: shape(:)
      integer, intent(out), optional      :: rank
      real(RD), intent(out), optional     :: axis_min(:)
      real(RD), intent(out), optional     :: axis_max(:)
      character(*), intent(out), optional :: axis_labels(:)

      if (PRESENT(shape)) then
         @:CHECK_BOUNDS(SIZE(shape), self%rank)
      end if

      ! Inquire metadata

      if (PRESENT(shape)) shape = self%shape
      if (PRESENT(rank)) rank = self%rank

      call self%ng%inquire(axis_min=axis_min, axis_max=axis_max, axis_labels=axis_labels)

      ! Finish

      return

   end subroutine inquire

   !****

   #:for name, var, arg_var, arg_type in (('intensity', 'I', 'mu', 'real(RD)'), &
                                          ('D_moment', 'D', 'l', 'integer'))

      subroutine interp_${name}$(self, vx, ${arg_var}$, ${var}$, stat, vderiv)

         class(photgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: vx(:)
         ${arg_type}$, intent(in)         :: ${arg_var}$
         real(RD), intent(out)            :: ${var}$
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: vderiv(:)

         ! Interpolate the ${name}$

         call self%ng%interp(proc_, vx, ${var}$, stat, vderiv)

         ! Finish

      contains

         subroutine proc_(vi, f, stat)

            integer, intent(in)            :: vi(:)
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            integer :: li

            li = self%ng%li_from_vi(vi)

            call self%pi(li)%interp_${name}$(${arg_var}$, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name, var in (('flux', 'F'), )

      subroutine interp_${name}$(self, vx, ${var}$, stat, vderiv)

         class(photgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: vx(:)
         real(RD), intent(out)            :: ${var}$
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: vderiv(:)

         ! Interpolate the ${name}$

         call self%ng%interp(proc_, vx, ${var}$, stat, vderiv)

         ! Finish

      contains

         subroutine proc_(vi, f, stat)

            integer, intent(in)            :: vi(:)
            real(RD), intent(out)          :: f
            integer, intent(out), optional :: stat

            integer :: li

            li = self%ng%li_from_vi(vi)

            call self%pi(li)%interp_${name}$(f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine read_(hi, pg, stat)

      type(hdf5io_t), intent(inout)  :: hi
      type(photgrid_t), intent(out)  :: pg
      integer, intent(out), optional :: stat

      character(TYPE_LEN)          :: type
      integer, allocatable         :: shape(:)
      type(hdf5io_t)               :: hi_ng
      type(ngrid_t)                :: ng
      integer                      :: n_pi
      type(photint_t), allocatable :: pi(:)

      ! Read the photgrid_t with no rebinning

      call hi%read_attr('TYPE', type)
      if (type /= 'photgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hi%alloc_read_attr('shape', shape)

      hi_ng = hdf5io_t(hi, 'ng')
      call read(hi_ng, ng)
      call hi_ng%final()

      n_pi = PRODUCT(shape)

      allocate(pi(n_pi))

      call ng%map(read_photint_)

      pg = photgrid_t(pi, ng)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   contains

      subroutine read_photint_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer        :: li
         type(hdf5io_t) :: hi_pi

         ! Read the photint_t for the node

         li = ng%li_from_vi(vi)
 
         hi_pi = hdf5io_t(hi, pi_name_(li))
         call read(hi_pi, pi(li))
         call hi_pi%final()

         ! Finish

         return

      end subroutine read_photint_

   end subroutine read_

   !****

   subroutine read_specgrid_(hi, pb, pg, stat)

      type(hdf5io_t), intent(inout)  :: hi
      type(passband_t), intent(in)   :: pb
      type(photgrid_t), intent(out)  :: pg
      integer, intent(out), optional :: stat

      character(TYPE_LEN)              :: type
      integer, allocatable             :: shape(:)
      type(hdf5io_t)                   :: hi_ng
      type(ngrid_t)                    :: ng
      integer                          :: n_pi
      type(dyn_photint_t), allocatable :: pi(:)

      call hi%read_attr('TYPE', type)
      if (type /= 'specgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_TYPE
            return
         else
            @:ABORT('invalid type')
         endif
      endif

      call hi%alloc_read_attr('shape', shape)

      hi_ng = hdf5io_t(hi, 'ng')
      call read(hi_ng, ng)
      call hi_ng%final()

      n_pi = PRODUCT(shape)

      allocate(pi(n_pi))

      call ng%map(read_dyn_photint_)

      pg = photgrid_t(pi, ng)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   contains

      subroutine read_dyn_photint_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer        :: li
         type(hdf5io_t) :: hi_pi

         ! Read the dyn_photint_t for the node

         li = ng%li_from_vi(vi)
 
         hi_pi = hdf5io_t(hi, si_name_(li))
         call read(hi_pi, pb, pi(li))
         call hi_pi%final()

         ! Finish

         return

      end subroutine read_dyn_photint_

   end subroutine read_specgrid_

   !****

   subroutine write_(hi, pg)

      type(hdf5io_t), intent(inout)   :: hi
      type(photgrid_t), intent(inout) :: pg

      type(hdf5io_t) :: hi_ng

      ! Write the photgrid_t

      call hi%write_attr('TYPE', 'photgrid_t')

      call hi%write_attr('shape', pg%shape)
      call hi%write_attr('rank', pg%rank)

      hi_ng = hdf5io_t(hi, 'ng')
      call write(hi_ng, pg%ng)
      call hi_ng%final()

      call pg%ng%map(write_photint_)

      ! Finish

      return

   contains

      subroutine write_photint_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer        :: li
         type(hdf5io_t) :: hi_pi

         ! Write the photint_t for the node

         li = pg%ng%li_from_vi(vi)

         hi_pi = hdf5io_t(hi, pi_name_(li))

         select type (pi => pg%pi)
         type is (photint_t)
            call write(hi_pi, pi(li))
         type is (dyn_photint_t)
            call write(hi_pi, pi(li))
         end select

         call hi_pi%final()

         ! Finish

         return

      end subroutine write_photint_

   end subroutine write_

   !****

   function pi_name_(li) result (name)

      integer, intent(in) :: li
      character(256)      :: name

      write(name, 100) li
100   format('pi(',I0,')')

   end function pi_name_

   !****

   function si_name_(li) result (name)

      integer, intent(in) :: li
      character(256)      :: name

      write(name, 100) li
100   format('si(',I0,')')

   end function si_name_

end module photgrid_m
