! Module  : hdf5_phottable_m
! Purpose : define hdf5_phottable_t type, for representing a HDF5-file
!           backed table of photometric intensities
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module hdf5_phottable_m

   ! Uses

   use forum_m

   use photint_m
   use mem_phottable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(mem_phottable_t) :: hdf5_phottable_t
   end type hdf5_phottable_t
   

   ! Interfaces

   interface hdf5_phottable_t
      module procedure hdf5_phottable_t_file_
      module procedure hdf5_phottable_t_files_
   end interface hdf5_phottable_t

   ! Access specifiers

   private

   public :: hdf5_phottable_t

contains

   function hdf5_phottable_t_file_(file_name, group_names) result(phottable)

      character(*), intent(in) :: file_name
      character(*), intent(in) :: group_names(:)
      type(hdf5_phottable_t)   :: phottable

      integer                   :: n
      character(:), allocatable :: file_names(:)

      ! Construct the phottable_t from the file name and list of group names

      n = SIZE(group_names)

      allocate(character(LEN(file_name))::file_names(n))

      file_names = file_name

      phottable = hdf5_phottable_t(file_names, group_names)

      ! Finish

      return

   end function hdf5_phottable_t_file_

   !****

   function hdf5_phottable_t_files_(file_names, group_names) result(phottable)

      character(*), intent(in) :: file_names(:)
      character(*), intent(in) :: group_names(:)
      type(hdf5_phottable_t)   :: phottable

      integer                      :: n
      type(photint_t), allocatable :: photints(:)
      integer                      :: i
      type(hdf5io_t)               :: hdf5io
      type(hdf5io_t)               :: hdf5io_photint

      @:CHECK_BOUNDS(SIZE(file_names), SIZE(group_names))

      ! Construct the phottable_t from the lists of file/group names

      n = SIZE(file_names)

      allocate(photints(n))

      do i = 1, n

         hdf5io = hdf5io_t(file_names(i), OPEN_FILE_RO)

         hdf5io_photint = hdf5io_t(hdf5io, group_names(i))
         call read(hdf5io_photint, photints(i))
         call hdf5io_photint%final()

         call hdf5io%final()

      end do

      phottable%mem_phottable_t = mem_phottable_t(photints)

      ! Finish

      return

   end function hdf5_phottable_t_files_

end module hdf5_phottable_m
