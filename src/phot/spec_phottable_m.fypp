! Module  : spec_phottable_m
! Purpose : define spec_phottable_t type, for representing a spectable_t-
!           backed table of photometric intensities
!
! Copyright 2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module spec_phottable_m

   ! Uses

   use forum_m

   use passband_m
   use photint_m
   use phottable_m
   use specint_m
   use spectable_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(phottable_t) :: spec_phottable_t
      private
      type(photint_t), allocatable    :: photints(:)
      class(spectable_t), allocatable :: spectable
      type(passband_t)                :: passband
      logical, allocatable            :: evaled(:)
      integer                         :: n
   contains
      private
      procedure, public :: inquire
      #:for name in ('intensity', 'E_moment', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
      procedure         :: eval_
      procedure         :: apply_
      procedure, public :: write
   end type spec_phottable_t

   ! Interfaces

   interface spec_phottable_t
      module procedure spec_phottable_t_
   end interface spec_phottable_t

   ! Access photifiers

   private

   public :: spec_phottable_t

contains

   function spec_phottable_t_(spectable, passband) result(phottable)

      class(spectable_t), intent(in) :: spectable
      type(passband_t), intent(in)   :: passband
      type(spec_phottable_t)         :: phottable

      integer :: n

      ! Construct the phottable_t from the spectable_t and the
      ! passband_t

      call spectable%inquire(n=n)

      allocate(phottable%photints(n))

      phottable%spectable = spectable
      phottable%passband = passband

      allocate(phottable%evaled(n))
      phottable%evaled = .FALSE.

      phottable%n = n

      ! Finish

      return

   end function spec_phottable_t_
      
   !****

   subroutine inquire(self, n)

      class(spec_phottable_t), intent(in) :: self
      integer, intent(out), optional      :: n

      ! Inquire metadata

      if (PRESENT(n)) n = self%n

      ! Finish

      return

   end subroutine inquire

   !****

   #:for name, arg_var, arg_type in (('intensity', 'mu', 'real(RD)'), &
                                     ('E_moment', 'k', 'integer'), &
                                     ('D_moment', 'l', 'integer'))

      subroutine interp_${name}$(self, i, ${arg_var}$, res, stat)

         class(spec_phottable_t), intent(inout) :: self
         integer, intent(in)                    :: i
         ${arg_type}$, intent(in)               :: ${arg_var}$
         real(RD), intent(out)                  :: res
         integer, intent(out), optional         :: stat

         ! Interpolate ${name}$

         call self%apply_(i, interp_proc_, stat)

         ! Finish

         return

      contains

         subroutine interp_proc_(photint, stat)

            type(photint_t), intent(in)    :: photint
            integer, intent(out), optional :: stat

            call photint%interp_${name}$(${arg_var}$, res, stat)

         end subroutine interp_proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name in ('flux', )

      subroutine interp_${name}$(self, i, res, stat)

         class(spec_phottable_t), intent(inout) :: self
         integer, intent(in)                    :: i
         real(RD), intent(out)                  :: res
         integer, intent(out), optional         :: stat

         ! Interpolate ${name}$

         call self%apply_(i, interp_proc_, stat)

         ! Finish

         return

      contains

         subroutine interp_proc_(photint, stat)

            type(photint_t), intent(in)    :: photint
            integer, intent(out), optional :: stat

            call photint%interp_${name}$(res, stat)

         end subroutine interp_proc_

      end subroutine interp_${name}$

   #:endfor


  !****

   subroutine apply_(self, i, proc, stat)

      class(spec_phottable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      interface
         subroutine proc(photint, stat)
            import photint_t
            type(photint_t), intent(in)    :: photint
            integer, intent(out), optional :: stat
         end subroutine proc
      end interface
      integer, intent(out), optional        :: stat

      ! Apply proc to the i'th element of the phottable

      if (.NOT. self%evaled(i)) then

         ! Evaluate the photint_t

         call self%eval_(i, stat)
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end if
         
      call proc(self%photints(i), stat)

      ! Finish

      return

   end subroutine apply_

   !****

   subroutine eval_(self, i, stat)
      
      class(spec_phottable_t), intent(inout) :: self
      integer, intent(in)                    :: i
      integer, intent(out), optional         :: stat

      ! Evaluate the i'th photint_t

      call self%spectable%filter(i, self%passband, self%photints(i), stat)
      
      self%evaled(i) = .TRUE.
         
      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine eval_

   !****

   !****

   subroutine write(self, hdf5io,  stat)

      class(spec_phottable_t), intent(inout) :: self
      type(hdf5io_t), intent(inout)          :: hdf5io
      integer, intent(out), optional         :: stat

      integer         :: i
      type(hdf5io_t)  :: hdf5io_photint

      ! Write the phottable_t

      call hdf5io%write_attr('TYPE', 'phottable_t')

      call hdf5io%write_attr('n', self%n)
      
      write_loop : do i = 1, self%n

         hdf5io_photint = hdf5io_t(hdf5io, self%elem_group_name(i))
         call self%apply_(i, write_proc_, stat)
         call hdf5io_photint%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         end if

      end do write_loop

      ! Finish

      return

   contains

      subroutine write_proc_(photint, stat)

         type(photint_t), intent(in)    :: photint
         integer, intent(out), optional :: stat

         call photint%write(hdf5io_photint, stat)

         return

      end subroutine write_proc_

   end subroutine write

end module spec_phottable_m
