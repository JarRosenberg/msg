program test_testgrid

   use kinds_m

   use axis_m
   use testgrid_m
   use ngrid_m
   use stat_m

   implicit none

   integer, parameter :: n_x = 8
   integer, parameter :: n_y = 12

   integer, parameter :: n_x_int = 100
   integer, parameter :: n_y_int = 75

   real(RD), allocatable :: x(:)
   real(RD), allocatable :: y(:)
   integer               :: i
   integer               :: j
   type(axis_t)          :: ax(2)
   logical, allocatable  :: mask(:)
   type(ngrid_t)         :: ng
   real(RD), allocatable :: f(:)
   integer               :: li
   type(testgrid_t)      :: tg
   real(RD), allocatable :: f2(:,:)

   ! Create axes

   x = [((i-1._RD)/(n_x-1._RD),i=1,n_x)]
   y = [((j-1._RD)/(n_y-1._RD),j=1,n_y)]

   ax(1) = axis_t(x, 'x')
   ax(2) = axis_t(y, 'y')

   ! Create the ngrid

   allocate(mask(n_x*n_y))

   mask = .TRUE.

   ng = ngrid_t(ax, mask)

   ! Create the testgrid

   allocate(f(n_x*n_y))

   do i = 1, n_x
      do j = 1, n_y
         li = ng%li_from_vi([i,j])
         f(li) = x(i)**2*y(j)**3 + 5*x(i) + 4
      end do
   end do

   tg = testgrid_t(f, ng)

   ! Now re-create axes

   x = [((i-1._RD)/(n_x_int-1._RD),i=1,n_x_int)]
   y = [((j-1._RD)/(n_y_int-1._RD),j=1,n_y_int)]

   allocate(f2(n_x_int,n_y_int))

   do i = 1, n_x_int
      do j = 1, n_y_int
         call tg%interp_f([x(i),y(j)], f2(i,j))
      end do
   end do

   ! Write out data

   do j = 1, n_y_int
      print *,f2(:,j)
   end do

   ! Finish

end program test_testgrid
