#:include 'forum.inc'

module test_ncubic_m

  ! Uses

  use kinds_m
  use order_m

  use ncubic_m

  use ISO_FORTRAN_ENV

  ! No implicit typing

  implicit none

  ! Access specifiers

  private

  public :: test

contains
 
   subroutine test()

      call test_bicubic_derivs_()
      call test_tricubic_derivs_()
      call test_interp_bicubic_()

   end subroutine test

   !****

   subroutine test_bicubic_derivs_()

      integer, parameter :: n_x = 8
      integer, parameter :: n_y = 10
      
      real(RD) :: x(n_x)
      real(RD) :: y(n_y)
      real(RD) :: f_in(n_x,n_y)
      real(RD) :: f(2,2,n_x-3,n_y-3)
      real(RD) :: df_dx(2,2,n_x-3,n_y-3)
      real(RD) :: df_dy(2,2,n_x-3,n_y-3)
      real(RD) :: d2f_dxdy(2,2,n_x-3,n_y-3)
      real(RD) :: f_chk(2,2,n_x-3,n_y-3)
      real(RD) :: df_dx_chk(2,2,n_x-3,n_y-3)
      real(RD) :: df_dy_chk(2,2,n_x-3,n_y-3)
      real(RD) :: d2f_dxdy_chk(2,2,n_x-3,n_y-3)

      print *,'bicubic_derivs'

      call bicubic_derivs_arrange_()
      call bicubic_derivs_act_()
      call bicubic_derivs_assert_()

   contains      
      
      subroutine bicubic_derivs_arrange_()

         integer :: i
         integer :: j

         x = [(i-1,i=1,n_x)]
         y = [(j-1,j=1,n_y)]**2

         do i = 1, n_x
            do j = 1, n_y
               call eval_biquadratic_(x(i), y(j), f_in(i,j))
            end do
         end do

      end subroutine bicubic_derivs_arrange_

      !****
  
      subroutine bicubic_derivs_act_()

         integer :: i
         integer :: j
         integer :: l
         integer :: m
         
         do i = 2, n_x-2
            do j = 2, n_y-2

               call eval_bicubic_derivs(x(i-1:i+2), y(j-1:j+2), f_in(i-1:i+2,j-1:j+2), &
                    f(:,:,i-1,j-1), df_dx(:,:,i-1,j-1), df_dy(:,:,i-1,j-1), d2f_dxdy(:,:,i-1,j-1))

               do l = 1, 2
                  do m = 1, 2

                     call eval_biquadratic_(x(i+l-1), y(j+m-1), &
                          f_chk(l,m,i-1,j-1), df_dx_chk(l,m,i-1,j-1), df_dy_chk(l,m,i-1,j-1), &
                          d2f_dxdy_chk(l,m,i-1,j-1))

                  end do
               end do

            end do
         end do

      end subroutine bicubic_derivs_act_

      !****
      
      subroutine bicubic_derivs_assert_()

         real(RD), parameter :: tol = 1E-13_RD

         real(RD), allocatable :: f_err(:,:,:,:)
         real(RD), allocatable :: df_dx_err(:,:,:,:)
         real(RD), allocatable :: df_dy_err(:,:,:,:)
         real(RD), allocatable :: d2f_dxdy_err(:,:,:,:)

         f_err = (f - f_chk)/f_chk
         df_dx_err = (df_dx - df_dx_chk)/df_dx_chk
         df_dy_err = (df_dy - df_dy_chk)/df_dy_chk
         d2f_dxdy_err = (d2f_dxdy - d2f_dxdy_chk)/d2f_dxdy_chk

         if (ALL(ABS(f_err) < tol)) then
            print *,'  PASS f'
         else
            print *,'  FAIL f:', MAXVAL(ABS(f_err)), '>', tol
         end if

         if (ALL(ABS(df_dx_err) < tol)) then
            print *,'  PASS df_dx'
         else
            print *,'  FAIL df_dx:', MAXVAL(ABS(df_dx_err)), '>', tol
         end if

         if (ALL(ABS(df_dy_err) < tol)) then
            print *,'  PASS df_dy'
         else
            print *,'  FAIL df_dy:', MAXVAL(ABS(df_dy_err)), '>', tol
         end if

         if (ALL(ABS(d2f_dxdy_err) < tol)) then
            print *,'  PASS d2f_dxdy'
         else
            print *,'  FAIL d2f_dxdy:', MAXVAL(ABS(d2f_dxdy_err)), '>', tol
         end if

      end subroutine bicubic_derivs_assert_

   end subroutine test_bicubic_derivs_

   !****

   subroutine test_tricubic_derivs_()

      integer, parameter :: n_x = 8
      integer, parameter :: n_y = 10
      integer, parameter :: n_z = 12
      
      real(RD) :: x(n_x)
      real(RD) :: y(n_y)
      real(RD) :: z(n_z)
      real(RD) :: f_in(n_x,n_y,n_z)
      real(RD) :: f(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: df_dx(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: df_dy(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: df_dz(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d2f_dxdy(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d2f_dxdz(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d2f_dydz(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d3f_dxdydz(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: f_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: df_dx_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: df_dy_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: df_dz_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d2f_dxdy_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d2f_dxdz_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d2f_dydz_chk(2,2,2,n_x-3,n_y-3,n_z-3)
      real(RD) :: d3f_dxdydz_chk(2,2,2,n_x-3,n_y-3,n_z-3)

      print *,'tricubic_derivs'

      call tricubic_derivs_arrange_()
      call tricubic_derivs_act_()
      call tricubic_derivs_assert_()

   contains      
      
      subroutine tricubic_derivs_arrange_()

         integer :: i
         integer :: j
         integer :: k

         x = [(i-1,i=1,n_x)]
         y = [(j-1,j=1,n_y)]**2
         z = [(k-1,k=1,n_z)]**3

         do i = 1, n_x
            do j = 1, n_y
               do k = 1, n_z
                  call eval_triquadratic_(x(i), y(j), z(k), f_in(i,j,k))
               end do
            end do
         end do

      end subroutine tricubic_derivs_arrange_

      !****
  
      subroutine tricubic_derivs_act_()

         integer :: i
         integer :: j
         integer :: k
         integer :: l
         integer :: m
         integer :: n 

         do i = 2, n_x-2
            do j = 2, n_y-2
               do k = 2, n_z-2

                  call eval_tricubic_derivs(x(i-1:i+2), y(j-1:j+2), z(k-1:k+2), f_in(i-1:i+2,j-1:j+2,k-1:k+2), &
                       f(:,:,:,i-1,j-1,k-1), df_dx(:,:,:,i-1,j-1,k-1), df_dy(:,:,:,i-1,j-1,k-1), df_dz(:,:,:,i-1,j-1,k-1), &
                       d2f_dxdy(:,:,:,i-1,j-1,k-1), d2f_dxdz(:,:,:,i-1,j-1,k-1), d2f_dydz(:,:,:,i-1,j-1,k-1), &
                       d3f_dxdydz(:,:,:,i-1,j-1,k-1))

                  do l = 1, 2
                     do m = 1, 2
                        do n = 1, 2
                           call eval_triquadratic_(x(i+l-1), y(j+m-1), z(k+n-1), &
                                f_chk(l,m,n,i-1,j-1,k-1), &
                                df_dx_chk(l,m,n,i-1,j-1,k-1), df_dy_chk(l,m,n,i-1,j-1,k-1), df_dz_chk(l,m,n,i-1,j-1,k-1), &
                                d2f_dxdy_chk(l,m,n,i-1,j-1,k-1), d2f_dxdz_chk(l,m,n,i-1,j-1,k-1), d2f_dydz_chk(l,m,n,i-1,j-1,k-1), &
                                d3f_dxdydz_chk(l,m,n,i-1,j-1,k-1))
                        end do
                     end do
                  end do

               end do
            end do
         end do

      end subroutine tricubic_derivs_act_

      !****
      
      subroutine tricubic_derivs_assert_()

         real(RD), parameter :: tol = 1E-13_RD

         real(RD), allocatable :: f_err(:,:,:,:,:,:)
         real(RD), allocatable :: df_dx_err(:,:,:,:,:,:)
         real(RD), allocatable :: df_dy_err(:,:,:,:,:,:)
         real(RD), allocatable :: df_dz_err(:,:,:,:,:,:)
         real(RD), allocatable :: d2f_dxdy_err(:,:,:,:,:,:)
         real(RD), allocatable :: d2f_dxdz_err(:,:,:,:,:,:)
         real(RD), allocatable :: d2f_dydz_err(:,:,:,:,:,:)
         real(RD), allocatable :: d3f_dxdydz_err(:,:,:,:,:,:)

         f_err = (f - f_chk)/f_chk

         df_dx_err = (df_dx - df_dx_chk)/df_dx_chk
         df_dy_err = (df_dy - df_dy_chk)/df_dy_chk
         df_dz_err = (df_dz - df_dz_chk)/df_dz_chk

         d2f_dxdy_err = (d2f_dxdy - d2f_dxdy_chk)/d2f_dxdy_chk
         d2f_dxdz_err = (d2f_dxdz - d2f_dxdz_chk)/d2f_dxdz_chk
         d2f_dydz_err = (d2f_dydz - d2f_dydz_chk)/d2f_dydz_chk

         d3f_dxdydz_err = (d3f_dxdydz - d3f_dxdydz_chk)/d3f_dxdydz_chk
         
         if (ALL(ABS(f_err) < tol)) then
            print *,'  PASS f'
         else
            print *,'  FAIL f:', MAXVAL(ABS(f_err)), '>', tol
         end if

         if (ALL(ABS(df_dx_err) < tol)) then
            print *,'  PASS df_dx'
         else
            print *,'  FAIL df_dx:', MAXVAL(ABS(df_dx_err)), '>', tol
         end if

         if (ALL(ABS(df_dy_err) < tol)) then
            print *,'  PASS df_dy'
         else
            print *,'  FAIL df_dy:', MAXVAL(ABS(df_dy_err)), '>', tol
         end if

         if (ALL(ABS(df_dz_err) < tol)) then
            print *,'  PASS df_dz'
         else
            print *,'  FAIL df_dz:', MAXVAL(ABS(df_dz_err)), '>', tol
         end if

         if (ALL(ABS(d2f_dxdy_err) < tol)) then
            print *,'  PASS d2f_dxdy'
         else
            print *,'  FAIL d2f_dxdy:', MAXVAL(ABS(d2f_dxdy_err)), '>', tol
         end if

         if (ALL(ABS(d2f_dxdz_err) < tol)) then
            print *,'  PASS d2f_dxdz'
         else
            print *,'  FAIL d2f_dxdz:', MAXVAL(ABS(d2f_dxdz_err)), '>', tol
         end if

         if (ALL(ABS(d2f_dydz_err) < tol)) then
            print *,'  PASS d2f_dydz'
         else
            print *,'  FAIL d2f_dydz:', MAXVAL(ABS(d2f_dydz_err)), '>', tol
         end if

         if (ALL(ABS(d3f_dxdydz_err) < tol)) then
            print *,'  PASS d3f_dxdydz'
         else
            print *,'  FAIL d3f_dzdydz:', MAXVAL(ABS(d3f_dxdydz_err)), '>', tol
         end if

      end subroutine tricubic_derivs_assert_

   end subroutine test_tricubic_derivs_

   !****

   subroutine test_interp_bicubic_()

      integer, parameter :: n_x = 4
      integer, parameter :: n_y = 6
      integer, parameter :: n_over = 10
      integer, parameter :: n_x_int = n_over*(n_x-1) + 1
      integer, parameter :: n_y_int = n_over*(n_y-1) + 1
      
      real(RD) :: x(n_x)
      real(RD) :: y(n_y)
      real(RD) :: f(n_x,n_y)
      real(RD) :: df_dx(n_x,n_y)
      real(RD) :: df_dy(n_x,n_y)
      real(RD) :: d2f_dxdy(n_x,n_y)
      real(RD) :: x_int(n_x_int)
      real(RD) :: y_int(n_y_int)
      real(RD) :: f_int(n_x_int,n_y_int)
      real(RD) :: df_dx_int(n_x_int,n_y_int)
      real(RD) :: df_dy_int(n_x_int,n_y_int)
      real(RD) :: d2f_dxdy_int(n_x_int,n_y_int)
      real(RD) :: f_chk(n_x_int,n_y_int)
      real(RD) :: df_dx_chk(n_x_int,n_y_int)
      real(RD) :: df_dy_chk(n_x_int,n_y_int)
      real(RD) :: d2f_dxdy_chk(n_x_int,n_y_int)

      print *,'interp_bicubic'

      call interp_bicubic_arrange_()
      call interp_bicubic_act_()
      call interp_bicubic_assert_()

   contains

      subroutine interp_bicubic_arrange_()

         integer :: i
         integer :: j

         x = [(i-1,i=1,n_x)]
         y = [(j-1,j=1,n_y)]**2

         do i = 1, n_x
            do j = 1, n_y
               call eval_bicubic_(x(i), y(j), f(i,j), df_dx(i,j), df_dy(i,j), d2f_dxdy(i,j))
            end do
         end do

      end subroutine interp_bicubic_arrange_

      !****
  
      subroutine interp_bicubic_act_()

         integer  :: i
         integer  :: j
         integer  :: l
         integer  :: m
         real(RD) :: dx
         real(RD) :: dy
         real(RD) :: u
         real(RD) :: v

         do i = 1, n_x-1
            do m = 1, n_over
               x_int(n_over*(i-1)+m) = x(i) + (x(i+1) - x(i))*(m-1)/n_over
            end do
         end do

         do j = 1, n_y-1
            do m = 1, n_over
               y_int(n_over*(j-1)+m) = y(j) + (y(j+1) - y(j))*(m-1)/n_over
            end do
         end do

         x_int(n_x_int) = x(n_x)
         y_int(n_y_int) = y(n_y)

         do i = 1, n_x_int
            do j = 1,n_y_int

               call locate(x, x_int(i), l)
               call locate(y, y_int(j), m)

               dx = x(l+1) - x(l)
               dy = y(m+1) - y(m)
               
               u = (x_int(i) - x(l))/dx
               v = (y_int(j) - y(m))/dy

               call interp_bicubic(f(l:l+1,m:m+1), df_dx(l:l+1,m:m+1), df_dy(l:l+1,m:m+1), d2f_dxdy(l:l+1,m:m+1), &
                    dx, dy, u, v, f_int(i,j))

               call interp_bicubic(f(l:l+1,m:m+1), df_dx(l:l+1,m:m+1), df_dy(l:l+1,m:m+1), d2f_dxdy(l:l+1,m:m+1), &
                    dx, dy, u, v, df_dx_int(i,j), d_dx=.TRUE.)

               call interp_bicubic(f(l:l+1,m:m+1), df_dx(l:l+1,m:m+1), df_dy(l:l+1,m:m+1), d2f_dxdy(l:l+1,m:m+1), &
                    dx, dy, u, v, df_dy_int(i,j), d_dy=.TRUE.)

               call interp_bicubic(f(l:l+1,m:m+1), df_dx(l:l+1,m:m+1), df_dy(l:l+1,m:m+1), d2f_dxdy(l:l+1,m:m+1), &
                    dx, dy, u, v, d2f_dxdy_int(i,j), d_dx=.TRUE., d_dy=.TRUE.)

               call eval_bicubic_(x_int(i), y_int(j), f_chk(i,j), df_dx_chk(i,j), df_dy_chk(i,j), d2f_dxdy_chk(i,j))

            end do
         end do

      end subroutine interp_bicubic_act_

      !****
      
      subroutine interp_bicubic_assert_()

         real(RD), parameter :: tol = 1E-13_RD

         real(RD), allocatable :: f_err(:,:)
         real(RD), allocatable :: df_dx_err(:,:)
         real(RD), allocatable :: df_dy_err(:,:)
         real(RD), allocatable :: d2f_dxdy_err(:,:)

         f_err = (f_int - f_chk)/f_chk
         df_dx_err = (df_dx_int - df_dx_chk)/f_chk
         df_dy_err = (df_dy_int - df_dy_chk)/f_chk
         d2f_dxdy_err = (d2f_dxdy_int - d2f_dxdy_chk)/f_chk

         if (ALL(ABS(f_err) < tol)) then
            print *,'  PASS f'
         else
            print *,'  FAIL f:', MAXVAL(ABS(f_err)), '>', tol
         end if

         if (ALL(ABS(df_dx_err) < tol)) then
            print *,'  PASS df_dx'
         else
            print *,'  FAIL df_dx:', MAXVAL(ABS(df_dx_err)), '>', tol
         end if

         if (ALL(ABS(df_dy_err) < tol)) then
            print *,'  PASS df_dy'
         else
            print *,'  FAIL df_dy:', MAXVAL(ABS(df_dy_err)), '>', tol
         end if

         if (ALL(ABS(d2f_dxdy_err) < tol)) then
            print *,'  PASS d2f_dxdy'
         else
            print *,'  FAIL d2f_dxdy:', MAXVAL(ABS(d2f_dxdy_err)), '>', tol
         end if


      end subroutine interp_bicubic_assert_

   end subroutine test_interp_bicubic_

   !****

   subroutine eval_biquadratic_(x, y, f, df_dx, df_dy, d2f_dxdy)

      real(RD), intent(in)            :: x
      real(RD), intent(in)            :: y
      real(RD), intent(out)           :: f
      real(RD), intent(out), optional :: df_dx
      real(RD), intent(out), optional :: df_dy
      real(RD), intent(out), optional :: d2f_dxdy

      f = x**2 + x*y**2 + 2*y + 4

      if (PRESENT(df_dx)) then
         df_dx = 2*x + y**2
      endif

      if (PRESENT(df_dy)) then
         df_dy = 2*x*y + 2
      endif

      if (PRESENT(d2f_dxdy)) then
         d2f_dxdy = 2*y
      endif

   end subroutine eval_biquadratic_

   !****

   subroutine eval_triquadratic_(x, y, z, f, df_dx, df_dy, df_dz, d2f_dxdy, d2f_dxdz, d2f_dydz, d3f_dxdydz)

      real(RD), intent(in)            :: x
      real(RD), intent(in)            :: y
      real(RD), intent(in)            :: z
      real(RD), intent(out)           :: f
      real(RD), intent(out), optional :: df_dx
      real(RD), intent(out), optional :: df_dy
      real(RD), intent(out), optional :: df_dz
      real(RD), intent(out), optional :: d2f_dxdy
      real(RD), intent(out), optional :: d2f_dxdz
      real(RD), intent(out), optional :: d2f_dydz
      real(RD), intent(out), optional :: d3f_dxdydz

      f = x**2*z + x*y**2*z + 2*y*z**2 + 4

      if (PRESENT(df_dx)) then
         df_dx = 2*x*z + y**2*z
      endif

      if (PRESENT(df_dy)) then
         df_dy = 2*x*y*z + 2*z**2
      endif

      if (PRESENT(df_dz)) then
         df_dz = x**2 + x*y**2 + 4*y*z
      endif

      if (PRESENT(d2f_dxdy)) then
         d2f_dxdy = 2*y*z
      endif

      if (PRESENT(d2f_dxdz)) then
         d2f_dxdz = 2*x + y**2
      endif

      if (PRESENT(d2f_dydz)) then
         d2f_dydz = 2*x*y + 4*z
      endif

      if (PRESENT(d3f_dxdydz)) then
         d3f_dxdydz = 2*y
      endif

   end subroutine eval_triquadratic_

   !****

   subroutine eval_bicubic_(x, y, f, df_dx, df_dy, d2f_dxdy)

      real(RD), intent(in)            :: x
      real(RD), intent(in)            :: y
      real(RD), intent(out)           :: f
      real(RD), intent(out), optional :: df_dx
      real(RD), intent(out), optional :: df_dy
      real(RD), intent(out), optional :: d2f_dxdy

      f = x**3 + x*y**3 + 2*y**2 + 4

      if (PRESENT(df_dx)) then
         df_dx = 3*x**2 + y**3
      endif

      if (PRESENT(df_dy)) then
         df_dy = 3*x*y**2 + 4*y
      endif

      if (PRESENT(d2f_dxdy)) then
         d2f_dxdy = 3*y**2
      endif

   end subroutine eval_bicubic_

end module test_ncubic_m
