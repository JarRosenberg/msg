! Module  : vgrid_m
! Purpose : Define vgrid_t type, providing support for virtual N-dimensional
!           interpolating grids
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module vgrid_m

   ! Uses
   
   use forum_m, locate_ => locate

   use axis_m
   use ncubic_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameter definitions

   logical, parameter :: faster = .TRUE.
   logical, parameter :: fastest = .TRUE.

   ! Derived-type definitions

   type vgrid_t
      private
      type(axis_t), allocatable :: axes(:)
      logical, allocatable      :: mask(:)
      integer, allocatable      :: shape(:)
      integer, allocatable      :: lin_con(:)
      integer, allocatable      :: con_lin(:)
      integer                   :: rank
      integer                   :: n_con
      integer                   :: n_lin
      integer                   :: n_stn
   contains
      private
      procedure, public :: get_rank
      procedure, public :: get_n_con
      procedure, public :: get_n_lin
      procedure, public :: get_axis
      procedure, public :: locate
      procedure, public :: map
      procedure, public :: con_from_lin
      procedure, public :: lin_from_con
      procedure, public :: lin_from_vec
      procedure, public :: vec_from_lin
      procedure         :: vec_from_stn_
      procedure         :: interp_0_
      procedure         :: interp_1_
      generic, public   :: interp => interp_0_, interp_1_
      procedure         :: setup_interp_
      procedure, public :: read
      procedure, public :: write
   end type vgrid_t

   ! Interfaces

   interface vgrid_t
      module procedure vgrid_t_
   end interface vgrid_t

   ! Access specifiers

   private

   public :: vgrid_t

   ! Procedures

contains

   function vgrid_t_ (axes, mask) result(vgrid)

      type(axis_t), intent(in) :: axes(:)
      logical, intent(in)      :: mask(:)
      type(vgrid_t)            :: vgrid

      integer :: rank
      integer :: j
      integer :: shape(SIZE(axes))
      integer :: i_con
      integer :: i_lin

      ! Construct vgrid from the supplied data

      rank = SIZE(axes)

      do j = 1, rank
         call axes(j)%get_n(shape(j))
      end do

      @:CHECK_BOUNDS(SIZE(mask), PRODUCT(shape))

      vgrid%mask = mask
      vgrid%axes = axes

      vgrid%shape = shape
      vgrid%rank = rank

      vgrid%n_con = COUNT(mask)
      vgrid%n_lin = SIZE(mask)

      vgrid%con_lin = UNPACK([(i_con, i_con=1,vgrid%n_con)], mask, 0)
      vgrid%lin_con = PACK([(i_lin, i_lin=1,vgrid%n_lin)], vgrid%con_lin /= 0)

      vgrid%n_stn = 4**rank

      ! Finish

      return

   end function vgrid_t_

   !****

   !****

   #:for name, type in (('rank', 'integer'),  &
                        ('n_con', 'integer'), &
                        ('n_lin', 'integer'))

      subroutine get_${name}$(self, ${name}$)

         class(vgrid_t), intent(in) :: self
         ${type}$, intent(out)      :: ${name}$

         ! Get ${name}$

         ${name}$ = self%${name}$

         ! Finish

         return

      end subroutine get_${name}$

   #:endfor

   !****
      
   subroutine get_axis(self, i, axis)

      class(vgrid_t), intent(in) :: self
      integer, intent(in)        :: i
      type(axis_t), intent(out)  :: axis

      ! Get the i'th axis

      axis = self%axes(i)

      ! Finish

      return

   end subroutine get_axis

   !****

   subroutine locate(self, x_vec, i_vec, stat)

      class(vgrid_t), intent(in)     :: self
      real(RD), intent(in)           :: x_vec(:)
      integer, intent(out)           :: i_vec(:)
      integer, intent(out), optional :: stat

      integer              :: j
      character(LABEL_LEN) :: label

      @:CHECK_BOUNDS(SIZE(x_vec), self%rank)
      @:CHECK_BOUNDS(SIZE(i_vec), self%rank)

      ! Locate x_vec in the grid

      do j = 1, self%rank

         call self%axes(j)%locate(x_vec(j), i_vec(j))

         if (i_vec(j) < 1) then
            if (PRESENT(stat)) then
               stat = STAT_OUT_OF_BOUNDS_AXIS_LO
               return
            else
               call self%axes(j)%get_label(label)
               @:ABORT('out-of-bounds (lo) on '//label//' axis')
            endif
         endif

         if (i_vec(j) > self%shape(j)) then
            if (PRESENT(stat)) then
               stat = STAT_OUT_OF_BOUNDS_AXIS_HI
               return
            else
               call self%axes(j)%get_label(label)
               @:ABORT('out-of-bounds (hi) on '//label//' axis')
            endif
         endif

      end do

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine locate

   !****

   subroutine map(self, map_proc, stat)

      class(vgrid_t), intent(in) :: self
      interface
         subroutine map_proc(i_vec, stat)
            use forum_m
            integer, intent(in)            :: i_vec(:)
            integer, intent(out), optional :: stat
         end subroutine map_proc
      end interface
      integer, intent(out), optional :: stat

      integer :: i_lin
      integer :: i_vec(self%rank)

      ! Apply the map_proc function to each unmasked node in the grid

      map_loop : do i_lin = 1, self%n_lin

         if (self%mask(i_lin)) then

            i_vec = self%vec_from_lin(i_lin)

            call map_proc(i_vec, stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            end if

         end if

      end do map_loop

      ! Finish

      return

   end subroutine map

   !****

   function con_from_lin(self, i_lin) result(i_con)

      class(vgrid_t), intent(in) :: self
      integer, intent(in)        :: i_lin
      integer                    :: i_con

      ! Calculate a contiguous index from a linear index

      i_con = self%con_lin(i_lin)

      ! Finish

      return

   end function con_from_lin

   !****

   function lin_from_con(self, i_con) result(i_lin)

      class(vgrid_t), intent(in) :: self
      integer, intent(in)        :: i_con
      integer                    :: i_lin

      ! Calculate a linear index from a contiguous index

      i_lin = self%lin_con(i_con)

      ! Finish

      return

   end function lin_from_con

   !****

   function lin_from_vec(self, i_vec) result(i_lin)

      class(vgrid_t), intent(in) :: self
      integer, intent(in)        :: i_vec(:)
      integer                    :: i_lin

      integer :: p
      integer :: j

      @:CHECK_BOUNDS(SIZE(i_vec), self%rank)

      ! Calculate a linear index from a vector index

      p = 1
      i_lin = i_vec(1)

      do j = 2, self%rank
         p = p*self%shape(j-1)
         i_lin = i_lin + (i_vec(j)-1)*p
      end do

      ! Finish

      return

   end function lin_from_vec

   !****

   function vec_from_lin(self, i_lin) result(i_vec)

      class(vgrid_t), intent(in) :: self
      integer, intent(in)        :: i_lin
      integer                    :: i_vec(self%rank)

      integer :: p
      integer :: r
      integer :: j

      ! Calculate a vector index from a linear index

      p = self%n_lin
      r = i_lin - 1

      do j = self%rank, 1, -1
         p = p/self%shape(j)
         i_vec(j) = r/p + 1
         r = r - (i_vec(j)-1)*p
      end do

      @:ASSERT_DEBUG(i_lin == self%lin_from_vec(i_vec), 'indexing error')

      ! Finish

      return

   end function vec_from_lin

   !****

   function vec_from_stn_(self, i_cell, i_stn) result(i_vec)

      class(vgrid_t), intent(in) :: self
      integer, intent(in)        :: i_cell(:)
      integer, intent(in)        :: i_stn
      integer                    :: i_vec(self%rank)

      integer :: p
      integer :: r
      integer :: j

      @:CHECK_BOUNDS(SIZE(i_cell), self%rank)

      ! Calculate a vector index from cell and stencil indices

      p = self%n_stn
      r = i_stn - 1

      do j = self%rank, 1, -1
         p = p/4
         i_vec(j) = r/p + 1
         r = r - (i_vec(j)-1)*p
      end do

      i_vec = i_vec + i_cell - 2

      @:ASSERT_DEBUG(ALL(i_vec >= i_cell-1 .AND. i_vec <= i_cell+2), 'indexing error')

      ! Finish

      return

   end function vec_from_stn_

   !****

   subroutine interp_0_(self, data_proc, x_vec, f_int, stat, vderiv)

      class(vgrid_t), intent(in) :: self
      interface
         subroutine data_proc(i_vec, data, stat)
            use forum_m
            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: data
            integer, intent(out), optional :: stat
         end subroutine data_proc
      end interface
      real(RD), intent(in)           :: x_vec(:)
      real(RD), intent(out)          :: f_int
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: vderiv(:)

      integer  :: i_cell(self%rank)
      logical  :: mask(self%n_stn)
      real(RD) :: vdelta(3,self%rank)
      real(RD) :: vu(self%rank)
      real(RD) :: K(self%n_stn,self%n_stn)
      integer  :: i_stn
      integer  :: i_vec(self%rank)
      real(RD) :: F(self%n_stn)
      real(RD) :: C(self%n_stn)
      real(RD) :: H(self%n_stn)

      @:CHECK_BOUNDS(SIZE(x_vec), self%rank)

      ! Interpolate a scalar value

      ! Set up the interpolation

      call self%setup_interp_(x_vec, i_cell, mask, vdelta, vu, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Evaluate the kernel

      call eval_kernel(self%rank, mask, vdelta, K, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Evaluate data at the stencil nodes

      do i_stn = 1, self%n_stn

         if (ANY(K(:,i_stn) /= 0._RD)) then

            i_vec = self%vec_from_stn_(i_cell, i_stn)

            call data_proc(i_vec, F(i_stn), stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            endif

         else

            F(i_stn) = 0._RD
            
         endif

      end do

      ! Perform the interpolation

      if (faster) then

         ! Evaluate the C vector

         C = MATMUL(K, F)

         call eval_ncubic(self%rank, vu, vdelta, H, vderiv)
         f_int = DOT_PRODUCT(H, C)

      else

         ! Evaluate the C vector

         C = MATMUL(K, F)

         call interp_ncubic(self%rank, vu, C, vdelta, f_int, vderiv)

      end if

      if (PRESENT(stat)) stat = STAT_OK

      ! Finish

      return

   end subroutine interp_0_

   !****

   subroutine interp_1_(self, data_proc, x_vec, f_int, stat, vderiv)

      class(vgrid_t), intent(in) :: self
      interface
         subroutine data_proc(i_vec, data, stat)
            use forum_m
            integer, intent(in)            :: i_vec(:)
            real(RD), intent(out)          :: data(:)
            integer, intent(out), optional :: stat
         end subroutine data_proc
      end interface
      real(RD), intent(in)           :: x_vec(:)
      real(RD), intent(out)          :: f_int(:)
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: vderiv(:)

      integer               :: i_cell(self%rank)
      logical               :: mask(self%n_stn)
      real(RD)              :: vdelta(3,self%rank)
      real(RD)              :: vu(self%rank)
      real(RD)              :: K(self%n_stn,self%n_stn)
      integer               :: n_m
      integer               :: i_stn
      integer               :: i_vec(self%rank)
      real(RD), allocatable :: F(:,:)
      real(RD)              :: C(self%n_stn)
      real(RD)              :: H(self%n_stn)
      integer               :: m

      @:CHECK_BOUNDS(SIZE(x_vec), self%rank)

      ! Interpolate an array value

      ! Set up the interpolation

      call self%setup_interp_(x_vec, i_cell, mask, vdelta, vu, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Evaluate the kernel

      call eval_kernel(self%rank, mask, vdelta, K, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      ! Evaluate data at the stencil nodes

      n_m = SIZE(f_int)

      allocate(F(self%n_stn,n_m))

      do i_stn = 1, self%n_stn

         if (ANY(K(:,i_stn) /= 0._RD)) then

            i_vec = self%vec_from_stn_(i_cell, i_stn)

            call data_proc(i_vec, F(i_stn,:), stat)
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            endif

         else

            F(i_stn,:) = 0._RD

         endif

      end do

      ! Now loop through output points

      if (faster) then

         if (fastest) then

            call eval_ncubic(self%rank, vu, vdelta, H, vderiv)

            H = MATMUL(H, K)

            !$OMP PARALLEL DO PRIVATE(C)
            do m = 1, n_m

               ! Perform the interpolation

               f_int(m) = DOT_PRODUCT(H, F(:,m))

            end do

         else

            call eval_ncubic(self%rank, vu, vdelta, H, vderiv)

            !$OMP PARALLEL DO PRIVATE(C)
            do m = 1, n_m

               ! Evaluate the C vector

               C = MATMUL(K, F(:,m))

               ! Perform the interpolation

               f_int(m) = DOT_PRODUCT(H, C)

            end do

         end if

      else

         !$OMP PARALLEL DO PRIVATE(C)
         do m = 1, n_m

            ! Evaluate the C vector

            C = MATMUL(K, F(:,m))

            ! Perform the interpolation

            call interp_ncubic(self%rank, vu, C, vdelta, f_int(m), vderiv)

         end do

      end if

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine interp_1_

   !****
   
   subroutine setup_interp_(self, x_vec, i_cell, mask, vdelta, vu, stat)

      class(vgrid_t), intent(in)     :: self
      real(RD), intent(in)           :: x_vec(:)
      integer, intent(out)           :: i_cell(:)
      logical, intent(out)           :: mask(:)
      real(RD), intent(out)          :: vdelta(:,:)
      real(RD), intent(out)          :: vu(:)
      integer, intent(out), optional :: stat

      integer  :: j
      real(RD) :: x_bdy(self%rank)
      logical  :: on_bdy(self%rank)
      integer  :: i_adj
      integer  :: i_cell_adj(self%rank)
      integer  :: i_cnr
      integer  :: i_vec(self%rank)
      integer  :: i_lin
      integer  :: i_stn
      integer  :: l
      integer  :: i
      real(RD) :: x(4)

      @:CHECK_BOUNDS(SIZE(x_vec), self%rank)
      @:CHECK_BOUNDS(SIZE(i_cell), self%rank)
      @:CHECK_BOUNDS(SIZE(mask), self%n_stn)

      @:CHECK_BOUNDS(SIZE(vdelta, 1), 3)
      @:CHECK_BOUNDS(SIZE(vdelta, 2), self%rank)

      @:CHECK_BOUNDS(SIZE(vu), self%rank)

      ! Locate the starting interpolation cell

      call self%locate(x_vec, i_cell, stat)
      if (PRESENT(stat)) then
         if (stat /= STAT_OK) return
      end if

      i_cell = MIN(i_cell, self%shape-1)

      ! Now (possibly) update the interpolation cell, to handle cases
      ! where it doesn't have all corners defined. If the point lies
      ! on a boundary with a neighboring cell, and that neighbor has
      ! all corners defined, then this will set i_cell to point to the
      ! neighbor

      ! First, determine which boundary(ies) the point is on

      do j = 1, self%rank
         call self%axes(j)%fetch(i_cell(j), x_bdy(j))
      end do

      on_bdy = x_vec == x_bdy

      ! Iterate over the interpolation cell and all neighboring cells

      adjacent_loop : do i_adj = 1, 2**self%rank

         do j = 1, self%rank

            ! Set up the cell index, weeding out cases that don't
            ! contain the point or fall outside the grid

            if (BTEST(i_adj-1, j-1)) then

               if (.NOT. on_bdy(j)) cycle adjacent_loop
               if (i_cell(j) == 1) cycle adjacent_loop

               i_cell_adj(j) = i_cell(j) - 1

            else

               i_cell_adj(j) = i_cell(j)

            end if

         end do

         ! Check whether all corners are defined

         corner_loop : do i_cnr = 1, 2**self%rank

            do j = 1, self%rank

               if (BTEST(i_cnr-1, j-1)) then
                  i_vec(j) = i_cell_adj(j) + 1
               else
                  i_vec(j) = i_cell_adj(j)
               endif

            end do

            i_lin = self%lin_from_vec(i_vec)

            if (.NOT. self%mask(i_lin)) cycle adjacent_loop

         end do corner_loop

         ! If so, update i_cell and finish

         i_cell = i_cell_adj
         exit adjacent_loop

      end do adjacent_loop

      ! Check whether the exercise failed

      if (i_adj > 2**self%rank) then

         if (PRESENT(stat)) then
            stat = STAT_UNAVAILABLE_DATA
            return
         else
            @:ABORT('unavailable data')
         endif

      endif

      ! Set up the stencil mask

      do i_stn = 1, self%n_stn

         i_vec = self%vec_from_stn_(i_cell, i_stn)

         mask(i_stn) = .NOT. ANY(i_vec < 1 .OR. i_vec > self%shape)

         if (mask(i_stn)) then
            i_lin = self%lin_from_vec(i_vec)
            mask(i_stn) = mask(i_stn) .AND. self%mask(i_lin)
         end if

      end do

      ! Set up the vdelta and vu values

      do j = 1, self%rank

         do l = 1, 4

            i = i_cell(j) + l - 2

            if (i < 1) then
               x(l) = -HUGE(0._RD)
            elseif (i > self%shape(j)) then
               x(l) = HUGE(0._RD)
            else
               call self%axes(j)%fetch(i, x(l))
            endif

         end do

         vdelta(:,j) = x(2:4) - x(1:3)

         vu(j) = (x_vec(j) - x(2))/vdelta(2,j)

      end do

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine setup_interp_

   !****

   subroutine read(self, hdf5io, stat)

      class(vgrid_t), intent(out)    :: self
      type(hdf5io_t), intent(inout)  :: hdf5io
      integer, intent(out), optional :: stat

      character(TYPE_LEN) :: type
      integer             :: revision

      ! Read the vgrid_t

      call hdf5io%read_attr('TYPE', type)
      if (type /= 'vgrid_t') then
         if (PRESENT(stat)) then
            stat = STAT_INVALID_FILE_TYPE
            return
         else
            @:ABORT('invalid file type')
         endif
      endif

      call hdf5io%read_attr('REVISION', revision)

      select case(revision)
      case(1)
         call read_rev1_(self, hdf5io, stat)
      case default
         if (PRESENT(stat)) then
            stat = STAT_INVALID_FILE_REVISION
            return
         else
            @:ABORT('invalid file revision')
         end if
      end select

      ! Finish

      return

   contains

      subroutine read_rev1_(self, hdf5io, stat)

         class(vgrid_t), intent(out)    :: self
         type(hdf5io_t), intent(inout)  :: hdf5io
         integer, intent(out), optional :: stat

         integer                   :: rank
         logical, allocatable      :: mask(:)
         type(axis_t), allocatable :: axes(:)
         integer                   :: j
         type(hdf5io_t)            :: hdf5io_axis

         call hdf5io%read_attr('rank', rank)

         allocate(axes(rank))

         axis_loop : do j = 1, rank
            hdf5io_axis = hdf5io_t(hdf5io, axis_group_name_(j))
            call axes(j)%read(hdf5io_axis, stat)
            call hdf5io_axis%final()
            if (PRESENT(stat)) then
               if (stat /= STAT_OK) return
            endif
         end do axis_loop

         call hdf5io%alloc_read_dset('mask', mask)

         select type(self)
         type is(vgrid_t)
            self = vgrid_t(axes, mask)
         class default
            @:ABORT('invalid type')
         end select

         if (PRESENT(stat)) stat = STAT_OK

         return

      end subroutine read_rev1_

   end subroutine read

   !****

   subroutine write(self, hdf5io, stat)

      class(vgrid_t), intent(in)     :: self
      type(hdf5io_t), intent(inout)  :: hdf5io
      integer, intent(out), optional :: stat

      integer        :: j
      type(hdf5io_t) :: hdf5io_axis

      ! Write the vgrid
      
      call hdf5io%write_attr('TYPE', 'vgrid_t')
      call hdf5io%write_attr('REVISION', 1)

      call hdf5io%write_attr('shape', self%shape)
      call hdf5io%write_attr('rank', self%rank)

      axis_loop: do j = 1, self%rank
         hdf5io_axis = hdf5io_t(hdf5io, axis_group_name_(j))
         call self%axes(j)%write(hdf5io_axis, stat)
         call hdf5io_axis%final()
         if (PRESENT(stat)) then
            if (stat /= STAT_OK) return
         endif
      end do axis_loop

      call hdf5io%write_dset('mask', self%mask)

      ! Finish

      if (PRESENT(stat)) stat = STAT_OK

      return

   end subroutine write

   !****

   function axis_group_name_(j) result (name)

      integer, intent(in) :: j
      character(256)      :: name

      write(name, 100) j
100   format('axes(',I0,')')

   end function axis_group_name_

end module vgrid_m
