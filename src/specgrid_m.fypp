! Module  : specgrid_m
! Purpose : define specgrid_t type, for representing spectral intensity
!           grids
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module specgrid_m

   ! Uses
   
   use kinds_m
   use hdf5io_m

   use ngrid_m
   use specint_m
   use dyn_specint_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type :: specgrid_t
      private
      class(specint_t), allocatable :: si(:)
      type(ngrid_t)                 :: ng
      real(RD)                      :: w_0
      real(RD)                      :: dw
      integer                       :: n_w
      integer, allocatable          :: shape(:)
      integer                       :: rank
   contains
      private
      procedure, public :: inquire
      #:for name in ('intensity', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
   end type specgrid_t

   ! Interfaces

   interface specgrid_t
      module procedure specgrid_t_
   end interface specgrid_t

   interface read
      module procedure read_nobin_
      module procedure read_rebin_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: specgrid_t
   public :: read
   public :: write

   ! Procedures

contains

   function specgrid_t_ (si, ng) result (sg)

      class(specint_t), intent(in) :: si(:)
      type(ngrid_t), intent(in)    :: ng
      type(specgrid_t)             :: sg

      integer              :: rank
      integer, allocatable :: shape(:)
      logical              :: first
      real(RD)             :: w_0
      real(RD)             :: dw
      integer              :: n_w

      ! Construct the specgrid_t

      call ng%inquire(rank=rank)

      allocate(shape(rank))

      call ng%inquire(shape=shape)

      @:CHECK_BOUNDS(SIZE(si), PRODUCT(shape))

      first = .TRUE.
      call ng%map(meta_proc_)
 
      allocate(sg%si, SOURCE=si)

      sg%ng = ng

      sg%w_0 = w_0
      sg%dw = dw
      sg%n_w = n_w

      sg%shape = shape
      sg%rank = rank

      ! Finish

      return

   contains

      subroutine meta_proc_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer  :: li
         real(RD) :: w_0_chk
         real(RD) :: dw_chk
         integer  :: n_w_chk

         ! Set or check metadata

         li = ng%li_from_vi(vi)

         if (first) then

            call si(li)%inquire(w_0=w_0, dw=dw, n_w=n_w)
            first = .FALSE.

         else

            call si(li)%inquire(w_0=w_0_chk, dw=dw_chk, n_w=n_w_chk)

            @:ASSERT(w_0 == w_0_chk, base wavelength mismatch)
            @:ASSERT(dw == dw_chk, wavelength increment mismatch)
            @:ASSERT(n_w == n_w_chk, dimension mismatch)

         end if

         ! Finish

         return

      end subroutine meta_proc_

   end function specgrid_t_

   !****

   subroutine inquire(self, w_0, dw, n_w, rank, shape)

      class(specgrid_t), intent(in)   :: self
      real(RD), intent(out), optional :: w_0
      real(RD), intent(out), optional :: dw
      integer, intent(out), optional  :: n_w
      integer, intent(out), optional  :: shape(:)
      integer, intent(out), optional  :: rank

      if (PRESENT(shape)) then
         @:CHECK_BOUNDS(SIZE(shape), self%rank)
      end if

      ! Inquire metadata

      if (PRESENT(w_0)) w_0 = self%w_0
      if (PRESENT(dw)) dw = self%dw
      if (PRESENT(n_w)) n_w = self%n_w

      if (PRESENT(shape)) shape = self%shape
      if (PRESENT(rank)) rank = self%rank

      ! Finish

      return

   end subroutine inquire

   !****

   #:for name, var, arg_var, arg_type in (('intensity', 'I', 'mu', 'real(RD)'), &
                                          ('D_moment', 'D', 'l', 'integer'))

      subroutine interp_${name}$(self, vx, ${arg_var}$, w_0, ${var}$, stat, vderiv)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: vx(:)
         ${arg_type}$, intent(in)         :: ${arg_var}$
         real(RD), intent(in)             :: w_0
         real(RD), intent(out)            :: ${var}$(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: vderiv(:)

         ! Interpolate the ${name}$

         call self%ng%interp(proc_, vx, ${var}$, stat, vderiv)

         ! Finish

      contains

         subroutine proc_(vi, f, stat)

            integer, intent(in)            :: vi(:)
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            integer :: li

            li = self%ng%li_from_vi(vi)

            call self%si(li)%interp_${name}$(${arg_var}$, w_0, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name, var in (('flux', 'F'), )

      subroutine interp_${name}$(self, vx, w_0, ${var}$, stat, vderiv)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: vx(:)
         real(RD), intent(in)             :: w_0
         real(RD), intent(out)            :: ${var}$(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: vderiv(:)

         ! Interpolate the ${name}$

         call self%ng%interp(proc_, vx, ${var}$, stat, vderiv)

         ! Finish

      contains

         subroutine proc_(vi, f, stat)

            integer, intent(in)            :: vi(:)
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            integer :: li

            li = self%ng%li_from_vi(vi)

            call self%si(li)%interp_${name}$(w_0, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine read_nobin_(hi, sg)

      type(hdf5io_t), intent(inout) :: hi
      type(specgrid_t), intent(out) :: sg

      type(ngrid_t)                    :: ng
      integer, allocatable             :: shape(:)
      integer                          :: n_si
      type(dyn_specint_t), allocatable :: si(:)

      ! Read the specgrid_t with no rebinning

      call read_base_(hi, ng, shape)

      n_si = PRODUCT(shape)

      allocate(si(n_si))

      call ng%map(read_specint_nobin_)

      sg = specgrid_t(si, ng)

      ! Finish

      return

   contains

      subroutine read_specint_nobin_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer        :: li
         type(hdf5io_t) :: hi_si

         ! Read the specint_t for the node with no rebinning

         li = ng%li_from_vi(vi)
 
         hi_si = hdf5io_t(hi, si_name_(li))
         call read(hi_si, si(li))
         call hi_si%final()

         ! Finish

         return

      end subroutine read_specint_nobin_
            
   end subroutine read_nobin_

   !****

   subroutine read_rebin_(hi, sg, w_0, dw, n_w)

      type(hdf5io_t), intent(inout) :: hi
      type(specgrid_t), intent(out) :: sg
      real(RD), intent(in)          :: w_0
      real(RD), intent(in)          :: dw
      integer, intent(in)           :: n_w

      type(ngrid_t)                    :: ng
      integer, allocatable             :: shape(:)
      integer                          :: n_si
      type(dyn_specint_t), allocatable :: si(:)

      ! Read the specgrid_t with rebinning

      call read_base_(hi, ng, shape)

      n_si = PRODUCT(shape)

      allocate(si(n_si))

      call ng%map(read_specint_rebin_)

      sg = specgrid_t(si, ng)

      ! Finish

      return

   contains
      
      subroutine read_specint_rebin_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer        :: li
         type(hdf5io_t) :: hi_si

         ! Read and rebin the specint_t for the node

         li = ng%li_from_vi(vi)
 
         hi_si = hdf5io_t(hi, si_name_(li))
         call read(hi_si, si(li), w_0, dw, n_w)
         call hi_si%final()

         ! Finish

         return

      end subroutine read_specint_rebin_

   end subroutine read_rebin_

   !****

   subroutine read_base_(hi, ng, shape)

      type(hdf5io_t), intent(inout)     :: hi
      type(ngrid_t), intent(out)        :: ng
      integer, allocatable, intent(out) :: shape(:)
 
      character(TYPE_LEN) :: file_type
      type(hdf5io_t)      :: hi_ng
      
      ! Read base components of the specgrid_t

      call hi%read_attr('TYPE', file_type)
      @:ASSERT(file_type == 'specgrid_t', invalid type)

      call hi%alloc_read_attr('shape', shape)
      
      hi_ng = hdf5io_t(hi, 'gr')
      call read(hi_ng, ng)
      call hi_ng%final()

      ! Finish

      return

   end subroutine read_base_

   !****

   subroutine write_(hi, sg)

      type(hdf5io_t), intent(inout) :: hi
      type(specgrid_t), intent(in)  :: sg

      type(hdf5io_t) :: hi_ng

      ! Write the specgrid_t

      select type (si => sg%si)

      type is (specint_t)

         call hi%write_attr('TYPE', 'specgrid_t')

         call hi%write_attr('w_0', sg%w_0)
         call hi%write_attr('dw', sg%dw)
         call hi%write_attr('n_w', sg%n_w)

         call hi%write_attr('shape', sg%shape)
         call hi%write_attr('rank', sg%rank)

         hi_ng = hdf5io_t(hi, 'ng')
         call write(hi_ng, sg%ng)
         call hi_ng%final()

         call sg%ng%map(write_specint_)

      type is (dyn_specint_t)

         @:ABORT(cannot write dyn_specint_t)

      end select

      ! Finish

      return

   contains

      subroutine write_specint_(vi, stat)

         integer, intent(in)            :: vi(:)
         integer, intent(out), optional :: stat

         integer        :: li
         type(hdf5io_t) :: hi_si

         ! Write the specint_t for the node

         li = sg%ng%li_from_vi(vi)
 
         hi_si = hdf5io_t(hi, si_name_(li))
         call write(hi_si, sg%si(li))
         call hi_si%final()

         ! Finish

         return

      end subroutine write_specint_

   end subroutine write_

   !****

   function si_name_(li) result (name)

      integer, intent(in) :: li
      character(256)      :: name

      write(name, 100) li
100   format('si(',I0,')')

   end function si_name_

end module specgrid_m
