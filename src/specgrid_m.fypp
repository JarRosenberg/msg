! Module  : specgrid_m
! Purpose : define specgrid_t type, for representing spectral intensity
!           grids
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module specgrid_m

   ! Uses
   
   use kinds_m
   use hdf5io_m

   use grid_m
   use specint_m
   use dyn_specint_m
   use stat_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type, extends(grid_t) :: specgrid_t
      private
      class(specint_t), allocatable :: si(:,:)
   contains
      private
      #:for name in ('intensity', 'D_moment', 'flux')
         procedure, public :: interp_${name}$
      #:endfor
   end type specgrid_t

   ! Interfaces

   interface specgrid_t
      module procedure specgrid_t_
   end interface specgrid_t

   interface read
      module procedure read_
      module procedure read_rebin_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: specgrid_t
   public :: read
   public :: write

   ! Procedures

contains

   function specgrid_t_ (gr, si) result (sg)

      type(grid_t), intent(in)     :: gr
      class(specint_t), intent(in) :: si(:,:)
      type(specgrid_t)             :: sg

      integer :: i
      integer :: j

      @:CHECK_BOUNDS(SIZE(ri, 1), gr%n_logT)
      @:CHECK_BOUNDS(SIZE(ri, 1), gr%n_logg)

      ! Construct the specgrid_t

      sg%grid_t = gr
 
      allocate(sg%si, SOURCE=si)

      ! Finish

      return

   end function specgrid_t_

   !****

   #:for name, var, arg_var, arg_type in (('intensity', 'I', 'mu', 'real(RD)'), &
                                          ('D_moment', 'D', 'l', 'integer'))

      subroutine interp_${name}$(self, logT, logg, ${arg_var}$, w_0, ${var}$, stat, d_dlogT, d_dlogg)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: logT
         real(RD), intent(in)             :: logg
         ${arg_type}$, intent(in)         :: ${arg_var}$
         real(RD), intent(in)             :: w_0
         real(RD), intent(out)            :: ${var}$(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: d_dlogT
         logical, intent(in), optional    :: d_dlogg

         ! Interpolate the ${name}$

         call self%interp(proc_, logT, logg, ${var}$, stat, d_dlogT, d_dlogg)

         ! Finish

      contains

         subroutine proc_(i, j, f, stat)

            integer, intent(in)            :: i
            integer, intent(in)            :: j
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            call self%si(i,j)%interp_${name}$(${arg_var}$, w_0, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   #:for name, var in (('flux', 'F'), )

      subroutine interp_${name}$(self, logT, logg, w_0, ${var}$, stat, d_dlogT, d_dlogg)

         class(specgrid_t), intent(inout) :: self
         real(RD), intent(in)             :: logT
         real(RD), intent(in)             :: logg
         real(RD), intent(in)             :: w_0
         real(RD), intent(out)            :: ${var}$(:)
         integer, intent(out), optional   :: stat
         logical, intent(in), optional    :: d_dlogT
         logical, intent(in), optional    :: d_dlogg

         ! Interpolate the ${name}$

         call self%interp(proc_, logT, logg, ${var}$, stat, d_dlogT, d_dlogg)

         ! Finish

      contains

         subroutine proc_(i, j, f, stat)

            integer, intent(in)            :: i
            integer, intent(in)            :: j
            real(RD), intent(out)          :: f(:)
            integer, intent(out), optional :: stat

            call self%si(i,j)%interp_${name}$(w_0, f, stat)

            return

         end subroutine proc_

      end subroutine interp_${name}$

   #:endfor

   !****

   subroutine read_(hi, sg)

      type(hdf5io_t), intent(inout) :: hi
      type(specgrid_t), intent(out) :: sg

      type(grid_t)                     :: gr
      type(dyn_specint_t), allocatable :: si(:,:)
      type(hdf5io_t)                   :: hi_si
      integer                          :: i
      integer                          :: j

      ! Read the specgrid_t

      call read(hi, gr, type='specgrid_t')

      allocate(si(gr%n_logT,gr%n_logg))

      logT_loop : do i = 1, gr%n_logT
         logg_loop : do j = 1, gr%n_logg

            if (gr%mask(i,j)) then
               hi_si = hdf5io_t(hi, si_name_(i,j))
               call read(hi_si, si(i,j))
               call hi_si%final()
            end if
            
         end do logg_loop
      end do logT_loop
      
      sg = specgrid_t(gr, si)

      ! Finish

   end subroutine read_

   !****

   subroutine read_rebin_(hi, sg, w_0, dw, n_w)

      type(hdf5io_t), intent(inout) :: hi
      type(specgrid_t), intent(out) :: sg
      real(RD), intent(in)          :: w_0
      real(RD), intent(in)          :: dw
      integer, intent(in)           :: n_w

      type(grid_t)                     :: gr
      type(dyn_specint_t), allocatable :: si(:,:)
      type(hdf5io_t)                   :: hi_si
      integer                          :: i
      integer                          :: j

      ! Read the specgrid_t

      call read(hi, gr, type='specgrid_t')

      allocate(si(gr%n_logT,gr%n_logg))

      logT_loop : do i = 1, gr%n_logT
         logg_loop : do j = 1, gr%n_logg

            if (gr%mask(i,j)) then
               hi_si = hdf5io_t(hi, si_name_(i,j))
               call read(hi_si, si(i,j), w_0, dw, n_w)
               call hi_si%final()
            end if
            
         end do logg_loop
      end do logT_loop
      
      sg = specgrid_t(gr, si)

      ! Finish

   end subroutine read_rebin_

   !****

   subroutine write_(hi, sg)

      type(hdf5io_t), intent(inout) :: hi
      type(specgrid_t), intent(in)  :: sg

      type(hdf5io_t) :: hi_si
      integer        :: i
      integer        :: j

      ! Write the specgrid_t

      select type (si => sg%si)

      type is (specint_t)

         call write(hi, sg%grid_t, type='specgrid_t')

         logT_loop : do i = 1, sg%n_logT
            logg_loop : do j = 1, sg%n_logg

               if (sg%mask(i,j)) then
                  hi_si = hdf5io_t(hi, si_name_(i,j))
                  call write(hi_si, si(i,j))
                  call hi_si%final()
               end if
            
            end do logg_loop
         end do logT_loop

      type is (dyn_specint_t)

         @:ABORT(cannot write dyn_specint_t)

      end select

      ! Finish

      return

   end subroutine write_

   !****

   function si_name_(i,j) result (name)

      integer, intent(in) :: i
      integer, intent(in) :: j
      character(256)      :: name

      write(name, 100) i, j
100   format('si(',I0,',',I0,')')

   end function si_name_

end module specgrid_m
