! Module  : radgrid_m
! Purpose : define radgrid_t type, for representing radiant intensity
!           grids
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

module radgrid_m

   ! Uses
   
   use kinds_m
   use hdf5io_m
   use order_m

   use interp_m
   use stat_m
   use radnode_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Derived-type definitions

   type radgrid_t
      private
      type(radnode_t), allocatable :: rn(:,:)
      logical, allocatable         :: mask(:,:)
      real(RD), allocatable        :: lnT(:)
      real(RD), allocatable        :: lng(:)
      integer                      :: n_lnT
      integer                      :: n_lng
   contains
      private
      procedure, public :: interp_intensity
      procedure, public :: interp_flux
   end type radgrid_t

   ! Interfaces

   interface radgrid_t
      module procedure radgrid_t_
   end interface radgrid_t

   interface read
      module procedure read_
   end interface read

   interface write
      module procedure write_
   end interface write

   ! Access specifiers

   private

   public :: radgrid_t
   public :: read
   public :: write

   ! Procedures

contains

   function radgrid_t_ (rn, mask, lnT, lng) result (rg)

      type(radnode_t), intent(in) :: rn(:,:)
      logical, intent(in)         :: mask(:,:)
      real(RD), intent(in)        :: lnT(:)
      real(RD), intent(in)        :: lng(:)
      type(radgrid_t)             :: rg

      @:CHECK_BOUNDS(SIZE(mask, 1), SIZE(rn, 1))
      @:CHECK_BOUNDS(SIZE(mask, 2), SIZE(rn, 2))

      @:CHECK_BOUNDS(SIZE(lnT), SIZE(rn, 1))
      @:CHECK_BOUNDS(SIZE(lng), SIZE(rn, 2))

      ! Costruct the radgrid_t

      rg%rn = rn
      rg%mask = mask

      rg%lnT = lnT
      rg%lng = lng

      rg%n_lnT = SIZE(lnT)
      rg%n_lng = SIZE(lng)

      ! Finish

      return

   end function radgrid_t_

   !****

   subroutine read_(hi, rg)

      type(hdf5io_t), intent(inout) :: hi
      type(radgrid_t), intent(out)  :: rg

      character(TYPE_LEN)          :: type
      integer                      :: n_lnT
      integer                      :: n_lng
      type(radnode_t), allocatable :: rn(:,:)
      logical, allocatable         :: mask(:,:)
      real(RD), allocatable        :: lnT(:)
      real(RD), allocatable        :: lng(:)
      type(hdf5io_t)               :: hi_rn
      integer                      :: i
      integer                      :: j

      ! Read the radgrid_t

      call hi%read_attr('TYPE', type)
      @:ASSERT(type == 'radgrid_t',invalid type)

      call hi%read_attr('n_lnT', n_lnT)
      call hi%read_attr('n_lng', n_lng)

      allocate(rn(n_lnT,n_lng))
      allocate(mask(n_lnT,n_lng))

      allocate(lnT(n_lnT))
      allocate(lng(n_lng))

      call hi%read_dset('mask', mask)

      lnT_loop : do i = 1, n_lnT
         lng_loop : do j = 1, n_lng

            if (mask(i,j)) then
               hi_rn = hdf5io_t(hi, rn_name_(i,j))
               call read(hi_rn, rn(i,j))
               call hi_rn%final()
            end if

         end do lng_loop
      end do lnT_loop

      call hi%read_dset('lnT', lnT)
      call hi%read_dset('lng', lng)

      rg = radgrid_t(rn, mask, lnT, lng)

      ! Finish

   end subroutine read_

   !****

   subroutine write_(hi, rg)

      type(hdf5io_t), intent(inout) :: hi
      type(radgrid_t), intent(in )  :: rg

      type(hdf5io_t) :: hi_rn
      integer        :: i
      integer        :: j

      call hi%write_attr('TYPE', 'radgrid_t')

      call hi%write_attr('n_lnT', rg%n_lnT)
      call hi%write_attr('n_lng', rg%n_lng)

      call hi%write_dset('mask', rg%mask)

      lnT_loop : do i = 1, rg%n_lnT
         lng_loop : do j = 1, rg%n_lng

            if (rg%mask(i,j)) then
               hi_rn = hdf5io_t(hi, rn_name_(i,j))
               call write(hi_rn, rg%rn(i,j))
               call hi_rn%final()
            end if

         end do lng_loop
      end do lnT_loop

      call hi%write_dset('lnT', rg%lnT)
      call hi%write_dset('lng', rg%lng)

      ! Finish

      return

   end subroutine write_

   !****

   function rn_name_(i,j) result (name)

      integer, intent(in) :: i
      integer, intent(in) :: j
      character(256)      :: name

      write(name, 100) i, j
100   format('rn(',I0,',',I0,')')

   end function rn_name_

   !****

   subroutine interp_intensity(self, lnT, lng, mu, I, stat, d_dlnT, d_dlng)

      class(radgrid_t), intent(in)   :: self
      real(RD), intent(in)           :: lnT
      real(RD), intent(in)           :: lng
      real(RD), intent(in)           :: mu
      real(RD), intent(out)          :: I
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: d_dlnT
      logical, intent(in), optional  :: d_dlng

      ! Interpolate the intensity

      call interp_bicubic(intensity_proc_, self%lnT, self%lng, lnT, lng, I, stat, d_dlnT, d_dlng)

      ! Finsh

      return

   contains

      subroutine intensity_proc_(i, j, f, stat, d_dx, d_dy)

         integer, intent(in)            :: i
         integer, intent(in)            :: j
         real(RD), intent(out)          :: f
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: d_dx
         logical, intent(in), optional  :: d_dy

         if (.NOT. self%mask(i,j)) then
            if (PRESENT(stat)) then
               stat = STAT_MISSING_DATA
               return
            else
               @:ABORT(missing data)
            endif
         endif

         f = self%rn(i, j)%intensity(mu, d_dlnT=d_dx, d_dlng=d_dy)

         if (PRESENT(stat)) stat = STAT_OK

      end subroutine intensity_proc_

   end subroutine interp_intensity

   !****

   subroutine interp_flux(self, lnT, lng, F, stat, d_dlnT, d_dlng)

      class(radgrid_t), intent(in)   :: self
      real(RD), intent(in)           :: lnT
      real(RD), intent(in)           :: lng
      real(RD), intent(out)          :: F
      integer, intent(out), optional :: stat
      logical, intent(in), optional  :: d_dlnT
      logical, intent(in), optional  :: d_dlng

      ! Interpolate the flux

      call interp_bicubic(flux_proc_, self%lnT, self%lng, lnT, lng, F, stat, d_dlnT, d_dlng)

      ! Finsh

      return

   contains

      subroutine flux_proc_(i, j, f, stat, d_dx, d_dy)

         integer, intent(in)            :: i
         integer, intent(in)            :: j
         real(RD), intent(out)          :: f
         integer, intent(out), optional :: stat
         logical, intent(in), optional  :: d_dx
         logical, intent(in), optional  :: d_dy

         if (.NOT. self%mask(i,j)) then
            if (PRESENT(stat)) then
               stat = STAT_MISSING_DATA
               return
            else
               @:ABORT(missing data)
            endif
         endif

         f = self%rn(i, j)%flux(d_dlnT=d_dx, d_dlng=d_dy)

         if (PRESENT(stat)) stat = STAT_OK
         
      end subroutine flux_proc_

   end subroutine interp_flux

end module radgrid_m
