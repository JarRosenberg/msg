! Module   : make_specgrid
! Purpose  : Create specgrid files from specint files
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program make_specgrid

   ! Uses

   use forum_m
   use msg_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Parameters

   integer, parameter :: NAME_LEN = 1024

   ! Derived-type definitions

   type node_t
      character(NAME_LEN)   :: file_name
      real(RD), allocatable :: x_vec(:)
      integer, allocatable  :: i_vec(:)
      real(RD)              :: lam_min
      real(RD)              :: lam_max
      integer               :: i_lin
      integer               :: i_con
   end type node_t

   ! Variables

   character(:), allocatable :: manifest_file_name
   character(:), allocatable :: specgrid_file_name
   logical                   :: allow_dupes

   type(specgrid_t) :: specgrid
   type(hdf5io_t)   :: hdf5io
   
   ! Read command-line arguments

   @:ASSERT(n_arg() == 2 .OR. n_arg() == 3, 'Syntax: make_specgrid manifest_file_name specgrid_file_name [allow_dupes]')

   call get_arg(1, manifest_file_name)
   call get_arg(2, specgrid_file_name)

   if (n_arg() == 3) then
      call get_arg(3, allow_dupes)
   else
      allow_dupes = .FALSE.
   end if

   ! Create the grid

   call create_grid(manifest_file_name, allow_dupes, specgrid)

   ! Write the grid

   hdf5io = hdf5io_t(specgrid_file_name, CREATE_FILE)
   call specgrid%write(hdf5io)
   call hdf5io%final()

   ! Finish

contains

   subroutine create_grid(manifest_file_name, allow_dupes, specgrid)

      character(*), intent(in)      :: manifest_file_name
      logical, intent(in)           :: allow_dupes
      type(specgrid_t), intent(out) :: specgrid

      type(node_t), allocatable :: nodes(:)
      type(axis_t), allocatable :: axes(:)
      logical, allocatable      :: mask(:)

      ! Create the grid

      call read_nodes_axes(manifest_file_name, nodes, axes)

      call build_mask(nodes, axes, mask)

      call build_grid(nodes, axes, mask, allow_dupes, specgrid)

      ! Finish

      return

   end subroutine create_grid

   !****

   subroutine read_nodes_axes(manifest_file_name, nodes, axes)

      character(*), intent(in)               :: manifest_file_name
      type(node_t), allocatable, intent(out) :: nodes(:)
      type(axis_t), allocatable, intent(out) :: axes(:)

      integer                   :: unit
      integer                   :: n_nodes
      integer                   :: i
      type(hdf5io_t)            :: hdf5io
      type(hdf5io_t)            :: hdf5io_labels
      character(:), allocatable :: labels(:)
      character(:), allocatable :: labels_chk(:)
      integer                   :: rank
      integer                   :: j
      real(RD), allocatable     :: x(:)

      ! Open the manifest file & count nodes (lines)

      open(NEWUNIT=unit, STATUS='OLD', FILE=manifest_file_name)

      n_nodes = 0

      count_loop: do
         read(unit, *, END=100)
         n_nodes = n_nodes + 1
      end do count_loop
      
100   continue

      ! Read the node data

      rewind(unit)

      allocate(nodes(n_nodes))

      node_loop : do i = 1, n_nodes

         read(unit, 110) nodes(i)%file_name
110      format(A)

         ! Open the HDF5 file

         hdf5io = hdf5io_t(nodes(i)%file_name, OPEN_FILE_RO)

         ! Read axis labels/values

         hdf5io_labels = hdf5io_t(hdf5io, 'labels')

         if (i == 1) then

            labels = hdf5io_labels%dset_names()

            associate (s => sort_indices(labels))
              labels = labels(s)
            end associate

            rank = SIZE(labels)

         else

            labels_chk = hdf5io_labels%dset_names()

            associate (s => sort_indices(labels_chk))
              labels_chk = labels_chk(s)
            end associate

            @:ASSERT(SIZE(labels_chk) == rank, 'mismatched labels')
            @:ASSERT(ALL(labels_chk == labels), 'mismatched labels')

         endif

         allocate(nodes(i)%x_vec(rank))

         do j = 1, rank
            call hdf5io_labels%read_dset(labels(j), nodes(i)%x_vec(j))
         end do

         call hdf5io_labels%final()

         ! Read wavelength range

         call hdf5io%read_attr('lam_min', nodes(i)%lam_min)
         call hdf5io%read_attr('lam_max', nodes(i)%lam_max)

         ! Close the file
         
         call hdf5io%final()

      end do node_loop

      close(unit)

      ! Set up the axes

      allocate(x(n_nodes))
      allocate(axes(rank))

      do j = 1, rank

         do i = 1, n_nodes
            x(i) = nodes(i)%x_vec(j)
         end do
         
         associate (u => unique_indices(x))
           axes(j) = axis_t(x(u), labels(j))
         end associate

      end do

      ! Finish

      return

   end subroutine read_nodes_axes

   !****

   subroutine build_mask(nodes, axes, mask)

      type(node_t), intent(in)          :: nodes(:)
      type(axis_t), intent(in)          :: axes(:)
      logical, allocatable, intent(out) :: mask(:)

      integer              :: rank
      integer, allocatable :: shape(:)
      integer              :: j
      integer              :: n_lin
      type(vgrid_t)        :: vgrid
      integer              :: i
      integer              :: i_vec(SIZE(axes))
      integer              :: i_lin

      ! Initialize the mask

      rank = SIZE(axes)
      allocate(shape(rank))
     
      do j = 1, rank
         call axes(j)%get_n(shape(j))
      end do

      n_lin = PRODUCT(shape)

      allocate(mask(n_lin))
      mask = .FALSE.

      ! Create a dummy vgrid to provide indexing      

      vgrid = vgrid_t(axes, mask)

      ! Update the mask

      do i = 1, SIZE(nodes)

         call vgrid%locate(nodes(i)%x_vec, i_vec)
         i_lin = vgrid%lin_from_vec(i_vec)

         mask(i_lin) = .TRUE.

      end do

      ! Finish

      return

   end subroutine build_mask

   !****

   subroutine build_grid(nodes, axes, mask, allow_dupes, specgrid)

      type(node_t), intent(in)      :: nodes(:)
      type(axis_t), intent(in)      :: axes(:)
      logical, intent(in)           :: mask(:)
      logical, intent(in)           :: allow_dupes
      type(specgrid_t), intent(out) :: specgrid
 
      integer                          :: rank
      integer, allocatable             :: shape(:)
      integer                          :: j
      type(vgrid_t)                    :: vgrid
      integer                          :: n_con
      character(NAME_LEN), allocatable :: file_names(:)
      character(NAME_LEN), allocatable :: group_names(:)
      integer                          :: i
      integer, allocatable             :: i_vec(:)
      integer                          :: i_lin
      integer                          :: i_con
      type(hdf5_specsource_t)          :: specsource
      
      ! Create vgrid with degenerate (length-1) dimensions stripped
      ! out

      rank = SIZE(axes)
      allocate(shape(rank))
     
      do j = 1, rank
         call axes(j)%get_n(shape(j))
      end do

      vgrid = vgrid_t(PACK(axes, shape > 1), mask)

      rank = COUNT(shape > 1)

      allocate(i_vec(rank))

      ! Set up the file/group name lists (with duplicate nodes removed)

      n_con = COUNT(mask)

      allocate(file_names(n_con))
      file_names = ''

      do i = 1, SIZE(nodes)

         call vgrid%locate(PACK(nodes(i)%x_vec, shape > 1), i_vec)
         i_lin = vgrid%lin_from_vec(i_vec)
         i_con = vgrid%con_from_lin(i_lin)

         if (file_names(i_con) /= '' .AND. .NOT. allow_dupes) then
            write(ERROR_UNIT, 100) TRIM(nodes(i)%file_name), TRIM(file_names(i_con)), nodes(i)%x_vec
100         format('file ', A, ' replaces existing file ', A,'; axes =', 999(1X,E11.4))
            @:ABORT('set the allow_dupes flag to proceed')
         end if

         file_names(i_con) = nodes(i)%file_name

      end do

      allocate(group_names(n_con))
      group_names = '/'

      ! Create specsource

      specsource = hdf5_specsource_t(file_names, group_names, MAXVAL(nodes%lam_min), MINVAL(nodes%lam_max))

      ! Create specgrid

      specgrid = specgrid_t(specsource, vgrid)

      call specgrid%set_cache_limit(0)

      ! Finish

      return

   end subroutine build_grid

end program make_specgrid
