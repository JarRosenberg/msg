! Module   : specint_to_photint
! Purpose  : create a specint file by rebinning / subsetting an existing
!            specint file
!
! Copyright 2021 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program specint_to_specint

   ! Uses

   use forum_m, PI_ => PI
   use msg_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables

   character(:), allocatable :: specint_filename_in
   real(RD)                  :: lambda_min
   real(RD)                  :: lambda_max
   real(RD)                  :: R
   character(:), allocatable :: specint_filename

   type(hdf5io_t)                    :: hi
   type(specint_t)                   :: si_in
   type(hdf5io_t)                    :: hi_la
   character(LABEL_LEN), allocatable :: labels(:)
   integer                           :: n_labels
   real(RD), allocatable             :: values(:)
   integer                           :: j
   real(RD)                          :: w_0_in
   real(RD)                          :: dw_in
   integer                           :: n_w_in
   real(RD)                          :: lambda_min_in
   real(RD)                          :: lambda_max_in
   real(RD)                          :: w_0
   real(RD)                          :: dw
   integer                           :: n_w
   type(specint_t)                   :: si

   ! Read command-line arguments

   @:ASSERT(n_arg() == 5, 'Syntax: specint_to_specint specint_filename_in lambda_min lambda_max R specint_filename')

   call get_arg(1, specint_filename_in)
   call get_arg(2, lambda_min)
   call get_arg(3, lambda_max)
   call get_arg(4, R)
   call get_arg(5, specint_filename)

   ! Read data from the specint file

   hi = hdf5io_t(specint_filename_in, OPEN_FILE_RO)
   call read(hi, si_in)

   hi_la = hdf5io_t(hi, 'labels')

   labels = hi_la%dset_names()
   n_labels = SIZE(labels)

   allocate(values(n_labels))

   do j = 1, SIZE(labels)
      call hi_la%read_dset(labels(j), values(j))
   end do

   call hi_la%final()

   call hi%final()

   ! Check wavelength bounds

   call si_in%inquire(w_0=w_0_in, dw=dw_in, n_w=n_w_in)

   lambda_min_in = EXP(w_0_in)
   lambda_max_in = EXP(w_0_in + n_w_in*dw_in)

   print *,'Input: ', specint_filename_in
   print *,'  lambda_min:', lambda_min_in
   print *,'  lambda_max:', lambda_max_in
   print *,'           R:', 1._RD/dw_in

   @:ASSERT(lambda_min >= lambda_min_in, 'lambda_min must be >= lambda_min_in')
   @:ASSERT(lambda_max <= lambda_max_in, 'lambda_min must be <= lambda_max_in')

   ! Set up rebin parameters

   if (R > 0) then
      dw = 1._RD/R
   else
      dw = dw_in
   endif

   w_0 = LOG(lambda_min)
   n_w = CEILING((LOG(lambda_max) - LOG(lambda_min))/dw)

   print *,'Output: ', specint_filename
   print *,'  lambda_min:', EXP(w_0), lambda_min
   print *,'  lambda_max:', EXP(w_0 + n_w*dw), lambda_max
   print *,'           R:', 1._RD/dw

   ! Do the rebinning

   si = specint_t(si_in, w_0, dw, n_w)

   ! Write data to the specint file

   hi = hdf5io_t(specint_filename, CREATE_FILE)
   call write(hi, si)

   hi_la = hdf5io_t(hi, 'labels')

   do j = 1, n_labels
      call hi_la%write_dset(labels(j), values(j))
   end do

   call hi%final()

   ! Finish

end program specint_to_specint
