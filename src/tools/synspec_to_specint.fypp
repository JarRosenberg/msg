! Module   : synspec_to_specint
! Purpose  : create specint files from synspec files
!
! Copyright 2021-2022 Rich Townsend & The MSG Team
!
! This file is part of MSG. MSG is free software: you can redistribute
! it and/or modify it under the terms of the GNU General Public
! License as published by the Free Software Foundation, version 3.
!
! MSG is distributed in the hope that it will be useful, but WITHOUT
! ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
! or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
! License for more details.
!
! You should have received a copy of the GNU General Public License
! along with this program.  If not, see <http://www.gnu.org/licenses/>.

#:include 'forum.inc'

program synspec_to_specint

   ! Uses

   use forum_m
   use math_m
   use msg_m

   use ISO_FORTRAN_ENV

   ! No implicit typing

   implicit none

   ! Variables

   character(:), allocatable :: synspec_filename
   integer                   :: n_mu
   real(RD)                  :: mu_0
   real(RD)                  :: R
   real(RD)                  :: lam_min
   real(RD)                  :: lam_max
   character(:), allocatable :: limb_law
   character(:), allocatable :: specint_filename

   type(limb_t)              :: li
   real(RD), allocatable     :: I_in(:,:)
   real(RD), allocatable     :: lam_in(:)
   real(RD)                  :: w_0
   real(RD)                  :: dw
   integer                   :: n_lam
   integer                   :: j
   real(RD), allocatable     :: mu(:)
   type(log_range_t)         :: ra
   real(RD), allocatable     :: lam(:)
   real(RD), allocatable     :: I(:,:)
   type(specint_t)           :: si
   type(hdf5io_t)            :: hi
   type(hdf5io_t)            :: hi_la
   character(:), allocatable :: label
   real(RD)                  :: value

   ! Read command-line arguments

   @:ASSERT(n_arg() >= 8 .AND. MOD(n_arg(), 2)==0, 'Syntax: synspec_to_specint synspec_filename n_mu mu_0 lam_min lam_max R limb_law specint_filename [label value] [label value]...')

   call get_arg(1, synspec_filename)
   call get_arg(2, n_mu)
   call get_arg(3, mu_0)
   call get_arg(4, lam_min)
   call get_arg(5, lam_max)
   call get_arg(6, R)
   call get_arg(7, limb_law)
   call get_arg(8, specint_filename)

   ! Set up the limb-darkening law

   li = limb_t(limb_law)

   ! Read data from the synspec file

   call read_data(synspec_filename, n_mu, lam_in, I_in)

   ! Set up the angle axis

   mu = [((mu_0*(n_mu-j) + 1._RD*(j-1))/(n_mu-1), j=1,n_mu)]

   ! Set up the output wavelength axis (uniform resolution)

   dw = 1._RD/R
   w_0 = LOG(lam_min)
   n_lam = FLOOR((LOG(lam_max) - LOG(lam_min))/dw) + 1

   ra = log_range_t(w_0, dw, n_lam)

   allocate(lam(n_lam))
   call ra%get_all(lam)

   ! Bin the data onto this axis

   allocate(I(n_mu,n_lam-1))

   call bin_data(lam_in, I_in, ra, I)

   ! Create the specint_t

   si = specint_t(I, mu, ra, li)

   ! Write the specint_t (together with labels)

   hi = hdf5io_t(specint_filename, CREATE_FILE, comp_level=9)

   call write(hi, si)

   hi_la = hdf5io_t(hi, 'labels')

   do j = 9, n_arg(), 2
      call get_arg(j, label)
      call get_arg(j+1, value)
      call hi_la%write_dset(label, value)
   end do

   call hi_la%final()

   call hi%final()

   ! Finish

contains

   subroutine read_data (filename, n_mu, lam, I)

      character(*), intent(in)           :: filename
      integer, intent(in)                :: n_mu
      real(RD), allocatable, intent(out) :: lam(:)
      real(RD), allocatable, intent(out) :: I(:,:)

      integer              :: unit
      real(RD)             :: H
      integer              :: d_lam
      integer              :: n_lam
      integer, allocatable :: ind(:)
      integer              :: i_lam
      integer              :: n_dup

      ! Open the input file

      open(NEWUNIT=unit, FILE=filename, STATUS='OLD')

      ! Read in the wavelength and intensity data

      d_lam = 1024

      allocate(lam(d_lam))
      allocate(I(n_mu,d_lam))

      n_lam = 0

      read_loop : do

         n_lam = n_lam + 1

         ! If necessary, expand arrays

         if(n_lam > d_lam) then
            d_lam = d_lam*2
            call reallocate(lam, [d_lam])
            call reallocate(I, [n_mu,d_lam])
         endif

         ! Read a block of data

         read(unit, *, END=100) lam(n_lam), H
         read(unit,*) I(:,n_lam)

         I(:,n_lam) = I(n_mu:1:-1,n_lam)

         ! Convert from to ergs/s/cm**2/Hz/sr to ergs/s/cm**2/Angstrom/sr

         I(:,n_lam) = I(:,n_lam)*C_LIGHT/(lam(n_lam)*1E-8_RD)**2*1E-8_RD

      end do read_loop

100   continue

      close(unit)

      n_lam = n_lam - 1
      d_lam = n_lam

      call reallocate(lam, [d_lam])
      call reallocate(I, [n_mu,d_lam])

      write(OUTPUT_UNIT, *) 'n_lam (as read) :', n_lam

      ! Sort the data by wavelength

      ind = sort_indices(lam)

      lam = lam(ind)
      I = I(:,ind)

      ! Merge duplicate points

      n_lam = 1

      n_dup = 0

      merge_loop : do i_lam = 2,d_lam

         if(lam(i_lam) == lam(n_lam)) then

            I(:,n_lam) = I(:,n_lam) + I(:,i_lam)
            n_dup = n_dup + 1

         else

            if(n_dup > 0) then

               I(:,n_lam) = I(:,n_lam)/(n_dup + 1)
               n_dup = 0

            endif

            n_lam = n_lam + 1

            lam(n_lam) = lam(i_lam)
            I(:,n_lam) = I(:,i_lam)

         endif

      end do merge_loop

      if(n_dup > 0) then
         I(:,n_lam) = I(:,n_lam)/(n_dup + 1)
      endif

      d_lam = n_lam

      call reallocate(lam, [d_lam])
      call reallocate(I, [n_mu,d_lam])

      write(OUTPUT_UNIT, *) 'n_lam (merged)  :', n_lam

      ! Finish

      return

   end subroutine read_data

   !****

   subroutine bin_data(lam_in, I_in, ra, I)

      real(RD), intent(in)       :: lam_in(:)
      real(RD), intent(in)       :: I_in(:,:)
      class(range_t), intent(in) :: ra
      real(RD), intent(out)      :: I(:,:)

      integer  :: n_mu
      integer  :: n_lam
      integer  :: k
      integer  :: j
      real(RD) :: lam_a
      real(RD) :: lam_b

      @:CHECK_BOUNDS(SIZE(I_in, 2), SIZE(lam_in))
      @:CHECK_BOUNDS(SIZE(I, 2), SIZE(lam)-1)

      ! Convert the piecewise-linear intensity data I_in(:,lam_in) to the binned data I(:,lam)

      n_mu = SIZE(I_in, 1)
      call ra%inquire(n=n_lam)

      mu_loop : do j = 1, n_mu

         call ra%get(1, lam_b)

         lam_loop : do k = 1, n_lam-1
            lam_a = lam_b
            call ra%get(k+1, lam_b)
            I(j,k) = integrate_lin(lam_in, I_in(j,:), lam_a, lam_b)/(lam_b - lam_a)
         end do lam_loop

      end do mu_loop

      ! Finish

   end subroutine bin_data

end program synspec_to_specint
